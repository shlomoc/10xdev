{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"10xDevelopers.dev","text":"<p>AI-Powered Coding Community</p> <ul> <li>Become a Top AI Builder</li> </ul>"},{"location":"#the-future-of-development-is-here","title":"The Future of Development Is Here","text":"<p>Welcome to the 10xdevelopers.dev - a community-driven website for AI-powered coding resources.</p> <p>See how an AI-powered approach redefines what's possible compared to a traditional approach.</p>"},{"location":"#traditional-development","title":"Traditional Development","text":"<ul> <li>Lengthy Timelines<ul> <li>Months of planning and design before any code is written, delaying time-to-market.</li> </ul> </li> <li>Excessive Design Phases<ul> <li>Weeks spent getting feedback on static wireframes and mockups before seeing anything functional.</li> </ul> </li> <li>Complex Infrastructure<ul> <li>Time and resources spent on managing servers and complex deployment pipelines.</li> </ul> </li> </ul>"},{"location":"#ai-powered-approach","title":"AI-Powered Approach","text":"<ul> <li>Rapid MVP Development<ul> <li>From concept to market-ready MVP quickly with iterative development.</li> </ul> </li> <li>Rapid Design<ul> <li>Skip lengthy design phases with lovable.dev, creating working UI and app logic immediately.</li> </ul> </li> <li>Scalable Infrastructure<ul> <li>Modern stack with Supabase and Vercel for automatic scaling without maintenance headaches.</li> </ul> </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>How to participate in 10xDevelopers community</p> <p>We welcome contributions from the community! Please review our README.txt for details on how to submit changes.</p> <p>Markdown Cheat Sheet</p>"},{"location":"agent-frameworks/","title":"Agent Frameworks","text":"<p>A guide to frameworks and platforms for building AI agents that can perform complex, multi-step tasks and coordinate with other agents.</p>"},{"location":"agent-frameworks/#available-frameworks","title":"Available Frameworks","text":""},{"location":"agent-frameworks/#a2a-agent-to-agent","title":"A2A (Agent to Agent)","text":"<p>An open protocol from Google that enables AI agents to communicate and collaborate regardless of their platform or creator.</p>"},{"location":"agent-frameworks/#langgraph","title":"LangGraph","text":"<p>LangChain's framework for building, deploying and managing complex generative AI agent workflows with observability tools.</p>"},{"location":"agent-frameworks/#crewai","title":"CrewAI","text":"<p>A framework for orchestrating role-playing, autonomous AI agents to work together as a crew on complex tasks.</p>"},{"location":"agent-frameworks/#mastra","title":"Mastra","text":"<p>A modern framework for building AI agents with TypeScript, built-in integrations and workflow management.</p>"},{"location":"agent-frameworks/#openai-agents-sdk-lightweight-python-framework-for-building-multi-agent-workflows","title":"OpenAI Agents SDK - Lightweight Python framework for building multi-agent workflows","text":"<p>Explore each framework to find the right approach for your agent development needs. Consider factors like team coordination, workflow complexity, platform integration, and observability requirements when choosing a framework.</p>"},{"location":"agent-frameworks/#how-to-choose","title":"How to choose","text":"<ul> <li>Need inter-agent communication protocols? \u2192 A2A</li> <li>Building complex multi-step workflows? \u2192 LangGraph </li> <li>Want role-based agent teams? \u2192 CrewAI</li> <li>Need modern framework using TypeScript? \u2192 Mastra</li> </ul>"},{"location":"agent-frameworks/a2a/","title":"A2A (Agent to Agent)","text":""},{"location":"agent-frameworks/a2a/#a2a-an-open-protocol-between-ai-agents","title":"a2a: An open protocol between AI agents.","text":"<p>a2a on GitHub Provides a common language and framework for agents, regardless of who built them or the platform they operate on, to interact and work together.</p> <ul> <li>A2A Python Quickstart Tutorial</li> <li>Google's Agent Stack in Action:ADK, A2A, MCP on Google Cloud A2A Workshop</li> </ul>"},{"location":"agent-frameworks/crewai/","title":"CrewAI","text":""},{"location":"agent-frameworks/crewai/#crewai_1","title":"CrewAI","text":"<p>Streamline workflows across industries with powerful AI agents</p> <ul> <li>Multi AI Agent Systems with crewAI Quickstart from deeplearning.ai</li> <li>Practical Multi AI Agents and Advanced Use Cases with crewAI Tutorial from deeplearning.ai</li> </ul>"},{"location":"agent-frameworks/langgraph/","title":"LangGraph","text":""},{"location":"agent-frameworks/langgraph/#langgraph_1","title":"LangGraph","text":"<p>An open source AI agent framework designed to build, deploy and manage complex generative AI agent workflows</p>"},{"location":"agent-frameworks/langgraph/#langsmith","title":"LangSmith:","text":"<p>A unified observability &amp; evals platform where teams can debug, test, and monitor AI app performance</p> <ul> <li>Langchain Academy Introduction to LangGraph</li> <li>AI Agents in LangGraph Intro from deeplearning.ai</li> <li>Long-Term Agentic Memory With LangGraph Tutorial from deeplearning.ai</li> <li>LangChain/LangGraph blog</li> </ul>"},{"location":"agent-frameworks/mastra/","title":"Mastra AI","text":""},{"location":"agent-frameworks/mastra/#mastra","title":"Mastra","text":"<p>The TypeScript Agent Framework</p> <ul> <li>Principles: Principles of Building AI Agents</li> <li>Docs: Documentation</li> <li>Tutorials Youtube channel</li> </ul>"},{"location":"ai-coding-tools/","title":"AI Coding Tools","text":"<p>A guide to AI-powered development tools that can accelerate your coding workflow.</p>"},{"location":"ai-coding-tools/#categories","title":"Categories","text":""},{"location":"ai-coding-tools/#cloud-ai-ides","title":"Cloud AI IDEs","text":"<p>Full-featured development environments that run in the cloud with AI capabilities and deployment built-in.</p>"},{"location":"ai-coding-tools/#vs-code-forks","title":"VS Code Forks","text":"<p>Enhanced versions of Visual Studio Code with advanced AI features and integrations.</p>"},{"location":"ai-coding-tools/#ide-plugins","title":"IDE Plugins","text":"<p>Extensions and plugins that add AI capabilities to existing development environments.</p>"},{"location":"ai-coding-tools/#ai-agents","title":"AI Agents","text":"<p>Autonomous coding assistants and command-line tools that can perform complex development tasks.</p> <p>Explore each category to find the right AI coding tools for your development workflow and project needs.</p>"},{"location":"ai-coding-tools/#how-to-choose","title":"How to choose","text":"<p>Use the category pages to reflect on your needs:</p> <ul> <li>Want fast MVP deployment? \u2192 Cloud-Based Platforms (Lovable, Google AI Studio, Bolt.new, Replit)</li> <li>Want developer IDEs with AI capabilities? \u2192 VS Code Forks (Cursor AI, Windsurf)</li> <li>Prefer open source where you pay by model token usage? \u2192 IDE Plugins (Cline, Roo Code)  </li> <li>Need automation and branching workflows? \u2192 AI Agents &amp; CLI Tools (Claude Code, Google Jules, OpenAI Codex)</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/","title":"Claude Code","text":"<p>Claude code is a CLI that can also be used with an IDE like VS Code using the /ide command.</p> <ul> <li>Claude Code - You can now sign up for a monthly plan (instead of paying per token which quickly adds up).</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/#documentation","title":"Documentation","text":"<ul> <li>Claude Code Docs - Official documentation</li> <li>Claude Code Common workflows - Common development patterns</li> <li> <p>Claude Code Agent Skills - Organized folders containing instructions, scripts, and resources</p> </li> <li> <p>Cheat Sheet - PDF cheat sheet</p> </li> <li>Claude Code Tips - Collection of Claude Code tips from Joe Njenga</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/#tutorials","title":"Tutorials","text":"<ul> <li>Mastering Claude Code in 30 minutes - YouTube tutorial by Boris Cherny</li> <li>Build with Claude - Claude Code Academy</li> <li>Claude Code in Action - Interactive course</li> <li>Claude Code: A Highly Agentic Coding Assistant - DeepLearning.AI course</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/#best-practices","title":"Best Practices","text":"<ul> <li>Claude Code Best Practices - \"think\" &lt; \"think hard\" &lt; \"think harder\" &lt; \"ultrathink.\" Each level allocates progressively more thinking budget for Claude to use.</li> <li>Tips on using Claude Code - Tips by Ian Nuttel</li> <li>Article on using Claude Code - Developer insights by Philipp Spiess</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/#use-cases","title":"Use Cases","text":"<ul> <li>How Anthropic teams use Claude Code - Real-world usage examples from Anthropic teams</li> <li>How we built our multi-agent research system - Engineering case study from Anthropic</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/#tools-extensions","title":"Tools &amp; Extensions","text":"<ul> <li>awesome-claude-subagents Claude subagents collection </li> <li>SuperClaude - Framework that enhances Claude Code with development personas and commands</li> <li>Claude Code Templates Ready to use templates</li> <li>Claude Code Development Kit - Multi-agent orchestration, automated docs &amp; MCP integration  </li> <li>claude-sessions - Comprehensive development session tracking and documentation</li> </ul>"},{"location":"ai-coding-tools/ai-agents/claude-code/#community","title":"Community","text":"<ul> <li>r/ClaudeAI - Reddit community for Claude discussions</li> </ul>"},{"location":"ai-coding-tools/ai-agents/codex/","title":"Codex","text":"<p>Codex is like Claude Code but its from OpenAI.</p> <ul> <li>How OpenAI Uses Codex - PDF guide on OpenAI's internal usage</li> </ul>"},{"location":"ai-coding-tools/ai-agents/warp/","title":"warp","text":"<p>warp is a coding agent that supports switching between different AI models (Claude, GPT-4o, Gemini),</p> <ul> <li>Official Documentation</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/aistudio/","title":"Google AI Studio","text":"<ul> <li>Google AI for Developers Central developer hub</li> <li>Google AI Studio: Build Apps with Gemini </li> <li>Firebase Studio: Google's Mobile and Web App Development Platform</li> <li>Firebase Studio docs</li> <li>Google for Startups</li> <li>Building AI Agents</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/base44/","title":"Base44","text":""},{"location":"ai-coding-tools/cloud-ai-ides/base44/#base44-build-apps-with-ai-in-minutes","title":"Base44: Build Apps with AI in Minutes","text":"<p>AI-powered no-code platform that turns natural language descriptions into fully functional apps with built-in database, authentication, payments, email, and hosting.</p> <ul> <li>Base44 Platform</li> <li>Base44 Features</li> <li>Documentation</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/bolt/","title":"Bolt.new","text":""},{"location":"ai-coding-tools/cloud-ai-ides/bolt/#boltnew-ai-powered-full-stack-web-development","title":"Bolt.new: AI-powered full-stack web development","text":"<p>Prompt, run, edit, and deploy full-stack web applications. Built on StackBlitz's WebContainers technology with AI-powered code generation.</p> <ul> <li>Bolt.new Platform</li> <li>Bolt.new Documentation</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/createanything/","title":"CreateAnything","text":"<p>createanything includes cross-platform mobile app development with automated Neon backend integration.</p>"},{"location":"ai-coding-tools/cloud-ai-ides/createanything/#key-features","title":"Key Features","text":""},{"location":"ai-coding-tools/cloud-ai-ides/createanything/#mobile-first-development","title":"Mobile-First Development","text":"<ul> <li>Expo Framework: Generates native mobile apps for both Android and iOS</li> <li>Cross-Platform Support: Single codebase for web, Android, and iOS</li> <li>Native Device Features: GPS, camera, accelerometers, push notifications</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/createanything/#supported-platforms","title":"Supported Platforms:","text":"<ul> <li>Android (Google Play Store)</li> <li>iOS (Apple App Store) </li> <li>Progressive Web Apps (PWA)</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/createanything/#official-documentation","title":"Official Documentation","text":""},{"location":"ai-coding-tools/cloud-ai-ides/lovable/","title":"Lovable","text":""},{"location":"ai-coding-tools/cloud-ai-ides/lovable/#lovable-superhuman-full-stack-engineer","title":"Lovable: Superhuman full stack engineer","text":""},{"location":"ai-coding-tools/cloud-ai-ides/lovable/#official-documentation","title":"Official Documentation","text":"<ul> <li>Building Web Applications with Lovable.dev</li> <li>Prompt Library</li> <li>Youtube channel</li> <li>Community</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/lovable/#community","title":"Community","text":"<ul> <li>Lovable Prompt Helper Custom GPT</li> <li>Lovable A-Z guide Notion doc</li> <li>Lovable playbook lovable app</li> <li>Prompt Hacks lovable app</li> <li>Prompt Directory lovable app</li> <li>Example Prompts X post</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/replit/","title":"Replit","text":""},{"location":"ai-coding-tools/cloud-ai-ides/replit/#replit-build-apps-and-sites-with-ai","title":"Replit: Build apps and sites with AI","text":"<p>Cloud-based IDE supporting 50+ programming languages with AI Agent for full app development and AI Assistant for code completion and debugging. Includes AI Deployment.</p> <ul> <li>Replit Platform</li> <li>Replit AI Documentation</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/rocket/","title":"Rocket.new","text":"<p>Rocket.new includes cross-platform mobile app development with automated Supabase backend integration.</p>"},{"location":"ai-coding-tools/cloud-ai-ides/rocket/#key-features","title":"Key Features","text":""},{"location":"ai-coding-tools/cloud-ai-ides/rocket/#figma-integration","title":"Figma Integration","text":"<ul> <li>Import Figma files and generate code for your app</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/rocket/#templates","title":"Templates","text":"<ul> <li>Import templates and generate code for your app</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/rocket/#mobile-first-development","title":"Mobile-First Development","text":"<ul> <li>Flutter Framework: Generates native mobile apps for both Android and iOS</li> <li>Cross-Platform Support: Single codebase for web, Android, and iOS</li> <li>Native Device Features: GPS, camera, accelerometers, push notifications</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/rocket/#supported-platforms","title":"Supported Platforms:","text":"<ul> <li>Android (Google Play Store)</li> <li>iOS (Apple App Store) </li> <li>Progressive Web Apps (PWA)</li> <li>Desktop (via Flutter)</li> </ul>"},{"location":"ai-coding-tools/cloud-ai-ides/rocket/#official-documentation","title":"Official Documentation","text":""},{"location":"ai-coding-tools/ide-plugins/cline/","title":"Cline","text":""},{"location":"ai-coding-tools/ide-plugins/cline/#cline-ai-pair-programmer-that-helps-you-write-code-faster-open-source","title":"Cline: AI pair programmer that helps you write code faster (open source)","text":"<ul> <li>Documentation</li> <li>AI Coding University</li> <li>Memory Bank</li> <li>Slash Commands</li> <li>Cline Community Prompts </li> <li>Cline Rules for SPARC</li> <li>Discord Community</li> <li>Blog</li> <li>X.com Latest tips</li> <li>MCP</li> <li>MCP Marketplace</li> </ul>"},{"location":"ai-coding-tools/ide-plugins/github/","title":"Github Copilot","text":""},{"location":"ai-coding-tools/ide-plugins/github/#github-copilot-ai-that-builds-with-you","title":"Github Copilot AI that builds with you","text":"<ul> <li>Github Copilot Quickstart </li> <li>Copilot Chat Cookbook</li> </ul>"},{"location":"ai-coding-tools/ide-plugins/roo/","title":"Roo","text":""},{"location":"ai-coding-tools/ide-plugins/roo/#roo-code-your-ai-powered-dev-team-right-in-your-editor","title":"Roo Code: Your AI-Powered Dev Team, Right in Your Editor","text":"<ul> <li>Roo Code vs Cline</li> <li>Github repo</li> <li>Documentation</li> <li>Boomerang tasks</li> <li>MCP</li> </ul>"},{"location":"ai-coding-tools/vs-code-forks/cursor/","title":"Cursor AI","text":""},{"location":"ai-coding-tools/vs-code-forks/cursor/#cursor-ide-ai-first-code-editor-designed-to-help-you-code-faster","title":"Cursor IDE: AI-first code editor designed to help you code faster","text":"<ul> <li>Documentation</li> <li>Documentation: Custom Modes</li> <li>Official Community</li> <li>Cursor CLI</li> <li>Documentation for CLI</li> </ul>"},{"location":"ai-coding-tools/vs-code-forks/cursor/#community-resources","title":"Community Resources","text":"<ul> <li>Playbooks Custom modes from community</li> <li>Cursor Rules and Resources</li> <li>Awesome Cursor Rules</li> <li>Task Master A task management system for AI-driven development, works with Cursor AI.</li> </ul>"},{"location":"ai-coding-tools/vs-code-forks/kiro/","title":"Kiro","text":""},{"location":"ai-coding-tools/vs-code-forks/kiro/#kiro-the-ai-ide-for-prototype-to-production","title":"Kiro: The AI IDE for prototype to production","text":"<p>AWS-built agentic AI IDE based on VS Code that uses spec-driven development. Features autonomous coding agents, event-driven hooks, and Model Context Protocol support.</p> <ul> <li>Kiro Platform</li> <li>GitHub Repository</li> <li>Documentation &amp; Getting Started</li> </ul>"},{"location":"ai-coding-tools/vs-code-forks/windsurf/","title":"Windsurf","text":""},{"location":"ai-coding-tools/vs-code-forks/windsurf/#windsurf-the-first-agentic-ide","title":"Windsurf: The first agentic IDE","text":"<ul> <li>Documentation</li> <li>Community</li> <li>Build Apps with Windsurf's AI Coding Agents Tutorial from deeplearning.ai </li> <li>How to connect Windsurf to github codespaces</li> <li>Windsurf rules and mcp Discover windsurf rules, mcp servers and more</li> <li>Windsurf University</li> </ul>"},{"location":"guides/AI_MVP_Template/","title":"AI MVP Template","text":"<pre><code>I want to create an app that lets users [describe primary function] using [technology or method].\n\nThis should work by allowing the user to [step-by-step user actions] to get [desired result/output].\n\nI want the app to be called \u201c[Your App Name]\u201d.\n\nThe target customer is [describe demographic and psychographic info] who struggle with [specific problem] because [reason]. This app solves it by [solution offered].\n\nI want the app to look and feel like [reference apps, websites, or styles]. Use inspiration from [Mobbin/Dribbble/etc.] if needed.\n\nThe landing page should include:\n- Hero section\n- How it works\n- Testimonials\n- Pricing\n- Frequently Asked Questions (FAQs)\n\nUsers should be able to start using the app by [initial user action, e.g., uploading an image] and sign up using [Google / email + password].\n\nThere should be [describe payment structure: one-time payment or subscription], processed via [Stripe or other platform]. Example:\n- $19 one-time for basic use\n- $9/month subscription for unlimited use and saving features\n\nUsers should also be able to:\n- Save their work to an account\n- Edit account details\n- Manage their subscription from their account page\n\nOptional feature(s): [mention only if essential and easy to implement]\n</code></pre> <p>Example: I want to create a web app that let\u2019s people create multiple ad variants from one ad creative image using AI.</p> <p>This should work by letting the user upload one ad image file, then sending the image to ChatGPT and using the prompt \u2018generate 10 variants of this image\u2019 to generate 10 more images. The user would then be asked to pay a one off fee or subscribe, and then be able to download the images.</p> <p>I want this app to be called \u2018More Variants\u2019</p> <p>The type of customer I am targeting is marketing managers who struggle to create lots of different ad variants so they can get ad variants much quicker and not have to wait for designers</p> <p>I want my app to look and feel fun and playful like notes on a sketchpad or a whiteboard with sticky notes like FigJam or Miro</p> <p>I want to create a landing page with a hero section, a how it works section, testimonials section, pricing section, and frequently asked questions.</p> <p>The user should be able to start using the app by uploading their first ad image file in the hero section and clicking a button underneath named \u2018create ad variants\u2019</p> <p>When the user clicks \u2018create ad variants\u2019 they should then be taken to a page which asks them to sign up using Google sign in or using an email and password to get their ad variants. Once they sign up, they should then be taken to a pricing screen to choose their plan. After choosing their plan, they should pay via Stripe, and then be taken to a page which shows a loading state whilst the image file the user uploaded is sent to ChatGPT to get their 10 ad variants. After that, the ad variants created by ChatGPT should be shown on the page and in the user\u2019s account.</p> <p>The user should also be able to save ad variants to their account, edit their account details, and also be able to manage their subscription (link to stripe) from their account page.</p> <p>There should be 2 payment options for users. A one-off payment of $19 that lets users get ad variants once, and a subscription option of $9/month that lets users get unlimited ad variants and save ad variants to their account.</p>"},{"location":"guides/ultimate-vibe-coding-guide/","title":"A Vibe Coding Guide (2025)","text":"<p>FROM IDEA TO MVP</p> <p>A modern, streamlined approach to building MVPs using AI-powered tools and efficient workflows.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#1-skip-traditional-design","title":"1. \ud83d\ude80 Skip Traditional Design","text":"<p>Purpose: Replace traditional design processes with AI-powered tools.</p> <p>Contents:</p> <ul> <li>Use lovable.dev for instant responsive UIs</li> <li>Get clickable prototypes in Week 1</li> <li>Built-in auth, forms, and routing</li> </ul> <p>Outcome: Faster development cycles with immediately usable prototypes.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#2-rapid-planning","title":"2. \ud83e\udde0 Rapid Planning","text":"<p>Purpose: Streamline the planning phase for quicker project initiation.</p> <p>Contents:</p> <ul> <li>Use ChatGPT Voice for client brainstorming</li> <li>CodeGuideDev for automated PRD + technical documentation</li> <li>MoSCoW Method (Must, Should, Could, Won't have) for feature prioritization</li> </ul> <p>Outcome: Clearer project requirements and priorities established early.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#3-mvp-development-with-lovable","title":"3. \u26a1 MVP Development with Lovable","text":"<p>Purpose: Leverage AI-powered development for core functionality.</p> <p>Contents:</p> <ul> <li>70-80% core functionality built in lovable.</li> <li>Frontend-backend integration</li> <li>User roles and permissions</li> <li>Basic CRUD operations</li> </ul> <p>Outcome: Rapidly implemented core functionality with minimal manual coding.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#4-enhanced-development-in-cursor","title":"4. \ud83d\udd27 Enhanced Development in Cursor","text":"<p>Purpose: Augment and refine the initial implementation.</p> <p>Contents:</p> <ul> <li>GitHub sync from Lovable -&gt; Cursor for intelligent codebase management</li> <li>Multi-file edits and optimizations</li> <li>Backend logic and API refinement</li> </ul> <p>Outcome: More sophisticated functionality and optimized code structure.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#5-database-management","title":"5. \ud83d\uddc4\ufe0f Database Management","text":"<p>Purpose: Efficient and automated database integration.</p> <p>Contents:</p> <ul> <li>Model Context Protocol (MCP) for Supabase integration</li> <li>Automated migrations and schema updates</li> <li>Real-time database management</li> </ul> <p>Outcome: Seamless database operations with minimal manual configuration.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#6-supabase-backend-integration","title":"6. \ud83d\udd10 Supabase Backend Integration","text":"<p>Purpose: Implement robust backend services quickly.</p> <p>Contents:</p> <ul> <li>OAuth and Magic Link authentication</li> <li>Row-Level Security</li> <li>PostgreSQL database</li> <li>Edge Functions</li> <li>Built-in file storage</li> </ul> <p>Outcome: Complete backend infrastructure without building from scratch.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#7-security-implementation","title":"7. \ud83d\udee1\ufe0f Security Implementation","text":"<p>Purpose: Ensure application security from the start.</p> <p>Contents:</p> <ul> <li>Row-Level Security</li> <li>Rate limiting via Vercel</li> <li>API key protection</li> <li>Server-side validation</li> </ul> <p>Outcome: Secure application with industry-standard protections built in.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#8-vercel-deployment","title":"8. \ud83c\udf10 Vercel Deployment","text":"<p>Purpose: Simplified deployment and hosting.</p> <p>Contents:</p> <ul> <li>GitHub auto-sync</li> <li>Global CDN</li> <li>Serverless functions</li> <li>Zero configuration needed</li> </ul> <p>Outcome: Instantly deployed application with global availability.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#9-development-philosophy","title":"9. \ud83c\udfaf Development Philosophy","text":"<p>Purpose: Maintain focus on essentials for rapid delivery.</p> <p>Contents:</p> <ul> <li>Focus on essential features</li> <li>Weekly iterations</li> <li>Early feedback loops</li> <li>Clear post-launch planning</li> </ul> <p>Outcome: Disciplined approach to development ensuring timely delivery.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#10-tech-stack-summary","title":"10. \ud83d\udee0\ufe0f Tech Stack Summary","text":"<p>Purpose: Integrated modern tools for efficient development.</p> <p>Contents:</p> <ul> <li>Cursor (AI IDE)</li> <li>Lovable (UI builder)</li> <li>Supabase (backend)</li> <li>Vercel (deployment)</li> <li>ChatGPT + CodeGuide (planning)</li> </ul> <p>Outcome: Technology stack optimized for AI-assisted development.</p>"},{"location":"guides/ultimate-vibe-coding-guide/#references","title":"References","text":""},{"location":"guides/ultimate-vibe-coding-guide/#the-way-of-code-inspiration-based-on-lao-tzu-by-rick-rubin-with-anthropic","title":"The Way of Code Inspiration based on Lao Tzu (by Rick Rubin with Anthropic)","text":""},{"location":"guides/ultimate-vibe-coding-guide/#12-rules-to-vibe-code-without-frustration-article","title":"12 Rules to Vibe Code Without Frustration Article","text":""},{"location":"guides/ultimate-vibe-coding-guide/#ai-app-mvp-prompt-template","title":"AI App MVP Prompt Template","text":""},{"location":"guides/ultimate-vibe-coding-guide/#all-in-one-saas-startup-prompt-posted-on-x","title":"All in one SaaS startup prompt (posted on X)","text":"<p>Final Result: \ud83c\udfc6 Production-ready MVP delivered in weeks using modern AI tools and efficient development practices. </p>"},{"location":"prompt-engineering/","title":"Context Engineering","text":"<p>Context Engineering is defined as the art and science of filling an LLM's context window with the right information at each step of a task. It's the natural evolution of prompt engineering.</p> <p>Prompt vs. Context Engineering: While prompt engineering uses static prompts, context engineering deals with dynamic information from multiple sources like user input, tool calls, history, and developer instructions.</p>"},{"location":"prompt-engineering/#tutorials","title":"Tutorials","text":"<ul> <li>Prompt Engineering Guide by Matthew Berman and Nick Wentz</li> <li>Google Prompt Engineering White Paper</li> </ul>"},{"location":"prompt-engineering/#prompt-generators","title":"Prompt Generators","text":"<ul> <li>ChatPRD AI for Product Managers</li> <li>SnapPrompt Turn screenshot into ready-to-use prompt to recreate the UI</li> <li>Anthropic Prompt Generator/Improver Generate a prompt</li> <li>OpenAI Playground Create prompt wizard</li> <li>meta-prompt-workflow Iterative approach</li> <li>Products like bolt also have prompt wizard</li> </ul>"},{"location":"prompt-engineering/#prompt-libraries","title":"Prompt Libraries","text":"<ul> <li>God of Prompt Your AI Superpowers In One Click</li> <li>LangChain Hub Explore and contribute prompts to the community hub</li> <li>Prompt Hub Community-driven prompt platform</li> <li>Prompt Library templates from Spec to Code o1 pro template system</li> <li>SDLC Prompts Github repo of prompts for software development</li> </ul>"},{"location":"prompt-engineering/#best-practices","title":"Best practices","text":"<ul> <li>Tips for prompting AI IDEs</li> <li>GPT-5 prompting tips</li> </ul>"},{"location":"prompt-engineering/#customizing-chatgpt","title":"Customizing ChatGPT","text":"<ul> <li>ChatGPT Custom Instructions Collection of custom instructions</li> </ul>"},{"location":"prompt-engineering/#hosted-models","title":"Hosted Models","text":"<ul> <li>Openrouter Unified interface for LLMs</li> <li>Requesty Intelligent LLM Routing</li> </ul>"},{"location":"prompt-engineering/#llm-rankings","title":"LLM Rankings","text":"<ul> <li>OpenRouter / Programming</li> </ul>"},{"location":"prompt-engineering/#community","title":"Community","text":"<ul> <li> <p>X.com Voices</p> <ul> <li>God of Prompt Sharing AI Prompts, Tips &amp; Tricks</li> </ul> </li> <li> <p>Reddit</p> <ul> <li>r/aipromptprogramming This group focuses on using AI tools for AI programming &amp; prompt engineering</li> <li>r/ChatGPTCoding Coding side of ChatGPT</li> </ul> </li> </ul>"},{"location":"prompt-engineering/#articles","title":"Articles","text":"<ul> <li>The Rise of Context Engineering</li> </ul>"},{"location":"prompt-engineering/anthropic/","title":"Anthropic","text":""},{"location":"prompt-engineering/anthropic/#core-products-tools","title":"Core Products &amp; Tools","text":"<ul> <li>Claude </li> <li>Anthropic Workbench </li> <li>Anthropic Prompt Generator/Improver </li> </ul>"},{"location":"prompt-engineering/anthropic/#documentation-guides","title":"Documentation &amp; Guides","text":"<ul> <li>Anthropic Docs </li> <li>Anthropic Models </li> <li>Anthropic Prompt Engineering Docs </li> <li>Anthropic's System Prompts </li> <li>Anthropic Prompt Library</li> <li>Anthropics Courses</li> </ul>"},{"location":"prompt-engineering/anthropic/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>Anthropic Evals</li> <li>Anthropic Cookbook Code and guides designed to help developers build with Claude</li> </ul>"},{"location":"prompt-engineering/anthropic/#community-updates","title":"Community &amp; Updates","text":"<ul> <li>Anthropic Blog </li> <li>Anthropic Youtube channel</li> </ul>"},{"location":"prompt-engineering/anthropic/#coding-tools","title":"Coding Tools","text":"<p>see Claude code</p>"},{"location":"prompt-engineering/gemini/","title":"Gemini","text":""},{"location":"prompt-engineering/gemini/#core-products-tools","title":"Core Products &amp; Tools","text":"<ul> <li>Gemini </li> <li>Google AI Studio </li> <li>Prompt Gallery </li> <li>Google Labs</li> </ul>"},{"location":"prompt-engineering/gemini/#documentation-guides","title":"Documentation &amp; Guides","text":"<ul> <li>Google Gemini Models </li> <li>Prompt Design Strategies </li> <li>Introduction to Prompt Design </li> <li>Gemini for Google Workspace Prompt Guide </li> <li>Writing Effective AI Prompts for Business </li> <li>Jules doc</li> </ul>"},{"location":"prompt-engineering/gemini/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>Tune Gemini Models by using SFT</li> </ul>"},{"location":"prompt-engineering/gemini/#community-updates","title":"Community &amp; Updates","text":"<ul> <li>Google AI Blog \u2013 Gemini</li> </ul>"},{"location":"prompt-engineering/gemini/#coding-tools","title":"Coding Tools","text":"<ul> <li>Jules an async development agent</li> <li>Gemini Code Assist</li> <li>Google AI for Developers</li> <li>Building AI Agents</li> </ul>"},{"location":"prompt-engineering/meta-prompt-workflow/","title":"Meta-Prompt Workflow","text":"<p>This document outlines a systematic approach to creating and refining prompts using AI assistance.</p>"},{"location":"prompt-engineering/meta-prompt-workflow/#step-1-initial-prompt-creation","title":"Step 1: Initial Prompt Creation","text":"<p>Run this prompt with ChatGPT o3 or Claude Opus:</p> <pre><code>Adopt the role of an expert prompt engineer.\nYou are an AI assistant designed to help users create high-quality, detailed task prompts.\n\nYour goal is to iteratively refine the user\u2019s prompt by:\n    \u2022   Understanding the task scope and objectives\n    \u2022   Defining expected deliverables and success criteria\n    \u2022   Clarifying technical and procedural requirements\n    \u2022   Organizing the prompt into clear sections or steps\n    \u2022   Ensuring the prompt is easy to understand and follow\nAsk the user fast questions (role, instructions, reasoning steps, output format, examples, context/audience, tone) before you create a detailed prompt for me.\n\nUse tools to gather sufficient information about the task.\nIf you need clarification on some of the details, ask specific questions one at a time.\n\nAfter the user answers these questions, perform a comprehensive research on best-fit prompt engineering technique based on their goal and context.\n\nAfter gathering sufficient information, produce the improved prompt and ask the user if they want any changes or additions.\nPerform this task thoroughly.\n</code></pre>"},{"location":"prompt-engineering/meta-prompt-workflow/#step-2-run-the-generated-prompt","title":"Step 2: Run the generated prompt","text":""},{"location":"prompt-engineering/meta-prompt-workflow/#step-3-after-receiving-the-first-version-of-your-prompt-use-this-evaluation-prompt","title":"Step 3: After receiving the first version of your prompt, use this evaluation prompt:","text":"<pre><code>Rate this prompt out of 10. List all strengths and weaknesses of this prompt, and proceed to improving so it's 10/10.\n\nResponse:\nImproved prompt (aiming for 10/10)\n...\n</code></pre>"},{"location":"prompt-engineering/meta-prompt-workflow/#step-4-testing-and-iteration","title":"Step 4: Testing and Iteration","text":"<ol> <li>Test the prompt in a new chat</li> <li>If the output needs improvement, return to the prompt creation chat and use this feedback prompt:</li> </ol> <pre><code>Now analyze my feedback after testing the prompt:\n\nWeaknesses:\n[LIST ALL BAD THINGS ABOUT THE PROMPT]\nStrengths:\n[LIST BRIEFLY WHAT YOU LIKE ABOUT THE PROMPT]\nIdeas:\n[IF YOU HAVE MORE IDEAS TO IMPROVE IT, LIST THEM HERE]\n\nConsidering my feedback above, proceed to surgically improving the prompt, focusing on the areas I listed as weaknesses.\n</code></pre>"},{"location":"prompt-engineering/meta-prompt-workflow/#step-5-iterative-refinement","title":"Step 5: Iterative Refinement","text":"<p>Continue the cycle of:</p> <ul> <li>Testing the prompt</li> <li>Sharing feedback</li> <li>Refining the prompt</li> <li>Testing again</li> </ul> <p>Repeat this process until you achieve the desired results.</p>"},{"location":"prompt-engineering/meta-prompt-workflow/#abridged-version","title":"Abridged version","text":"<pre><code>You are my expert prompt engineer. I would like to accomplish: [insert your goal].\nPlease repeat this back to me in your own words, and ask clarifying questions.\nOnce we confirm, generate the final optimized prompt.\u201d\n</code></pre>"},{"location":"prompt-engineering/openai/","title":"OpenAI","text":""},{"location":"prompt-engineering/openai/#core-products-tools","title":"Core Products &amp; Tools","text":"<ul> <li>ChatGPT</li> <li>Prompt Optimizer </li> <li>OpenAI Playground </li> <li>GPT Store </li> <li>Create a GPT Requires at least Plus account</li> <li>Atlas Browser with ChatGPT built in</li> </ul>"},{"location":"prompt-engineering/openai/#documentation-guides","title":"Documentation &amp; Guides","text":"<ul> <li> <p>OpenAI Models </p> </li> <li> <p>OpenAI Prompt Engineering Docs </p> </li> <li>OpenAI Reasoning Models Docs </li> <li>OpenAI Cookbook </li> <li>OpenAI gpt-5 prompting guide</li> <li>OpenAI Function calling </li> <li>OpenAI GPTs Documentation </li> <li>OpenAI API Reference</li> <li>OpenAI Guide to building agents</li> <li>OpenAI Model Spec Approach to shaping desired model behavior.</li> </ul>"},{"location":"prompt-engineering/openai/#legacy-docs","title":"Legacy Docs","text":"<ul> <li>How to choose models Prior to GPT-5</li> <li>OpenAI gpt4.1 prompting guide</li> </ul>"},{"location":"prompt-engineering/openai/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>OpenAI Evals</li> <li> <p>OpenAI Tokenizer </p> </li> <li> <p>Agent Builder Visual canvas for building multi-step agent workflows</p> </li> <li>OpenAI Apps SDK Framework to build apps for ChatGPT</li> </ul>"},{"location":"prompt-engineering/openai/#community-updates","title":"Community &amp; Updates","text":"<ul> <li>OpenAI Blog </li> <li>OpenAI Developer Forum </li> <li>OpenAI Academy</li> <li>Prompt Packs</li> </ul>"},{"location":"prompt-engineering/xAI/","title":"xAI","text":"<ul> <li>Grok Web interface for interacting with Grok</li> <li>xAI Developer Portal Portal for API key generation and API access to Grok models as well as Twitter feeds </li> <li>xAI API xAI developer documentation</li> <li>xAI Cookbook</li> </ul>"},{"location":"reference/claude-code-tips/","title":"Ian Nuttall's Tips for Using Claude Code","text":"<p>Source: Ian Nuttall's Tips for Using Claude Code (also mostly works for Cursor + other coding tools)</p>"},{"location":"reference/claude-code-tips/#1-take-longer-than-you-think-to-plan","title":"1. Take longer than you think to plan","text":"<ul> <li>Use Claude Desktop in open-ended conversation to discuss:<ul> <li>Tech stack</li> <li>Packages and libraries to use</li> <li>MVP features needed</li> </ul> </li> <li>Verify suggestions manually, especially for unfamiliar stacks.</li> </ul>"},{"location":"reference/claude-code-tips/#2-find-urls-and-repos-to-share","title":"2. Find URLs and repos to share","text":"<ul> <li>Claude might not know the latest packages.</li> <li>Provide URLs to documentation and GitHub repos.</li> <li>Pro tip: Use uithub.com instead of github.com for LLM-friendly repo context.</li> </ul>"},{"location":"reference/claude-code-tips/#3-ask-claude-to-write-a-highly-detailed-step-by-step-plan","title":"3. Ask Claude to write a highly detailed, step-by-step plan","text":"<ul> <li>Request a meticulous, executable plan that any human or agent can follow.</li> <li>IMPORTANT: Don't give Claude Code the entire plan upfront. Work through the plan one step at a time as the conductor.</li> </ul>"},{"location":"reference/claude-code-tips/#4-get-a-working-version-asap","title":"4. Get a working version ASAP","text":"<ul> <li>Don't try to build the full app at once.</li> <li>Focus on getting a bare minimum MVP working first.</li> <li>Iterate from there. It's easier to add 1 feature than 10 at once.</li> </ul>"},{"location":"reference/claude-code-tips/#5-run-init-in-claude-code-to-create-a-claudemd-file","title":"5. Run /init in Claude Code to create a CLAUDE.md file","text":"<ul> <li>Do this after the MVP is working.</li> <li>Use # comments to add memories later, e.g.: # Always run bun typecheck to check for type errors</li> <li>Root CLAUDE.md should contain project-level rules only.</li> </ul>"},{"location":"reference/claude-code-tips/#6-add-claudemd-files-to-subdirectories","title":"6. Add CLAUDE.md files to subdirectories","text":"<ul> <li>Create per-directory rule files:<ul> <li>/src/components/CLAUDE.md</li> <li>/src/db/CLAUDE.md</li> </ul> </li> <li>Claude uses this for precise context. It makes a HUGE difference.</li> </ul>"},{"location":"reference/claude-code-tips/#7-track-every-session","title":"7. Track every session","text":"<ul> <li>Log each session by answering:<ul> <li>What are you working on?</li> <li>What did you do in this session?</li> <li>What worked? What didn't?</li> <li>What are the next steps?</li> </ul> </li> <li>Use claude-sessions for memory and tracking.</li> </ul>"},{"location":"reference/claude-code-tips/#8-use-clear-as-early-as-possible","title":"8. Use /clear as early as possible","text":"<ul> <li>You can use /compact, but detailed session logs are better for preserving context.</li> <li>Clear as soon as you hit a good stopping point.</li> <li>Claude becomes less effective after the context warning.</li> </ul>"},{"location":"reference/claude-code-tips/#9-use-subagents-and-ultrathink-sparingly","title":"9. Use subagents and \"ultrathink\" sparingly","text":"<ul> <li>Powerful tools, but they burn context quickly, making Claude feel \"dumber\".</li> <li>Use them for understanding and planning.</li> <li>Then save the session and /clear before continuing.</li> </ul>"},{"location":"reference/claude-code-tips/#10-use-repo-prompt-for-tough-bugsfeatures","title":"10. Use Repo Prompt for tough bugs/features","text":"<ul> <li>o3 is a great coding model but not a good agent.</li> <li>Use Repo Prompt MCP to let Claude:<ul> <li>Find context</li> <li>Pass task to o3</li> <li>Get it implemented</li> </ul> </li> </ul>"},{"location":"reference/claude-code-tips/#11-use-playwright-to-test-your-app","title":"11. Use Playwright to test your app","text":"<ul> <li>Playwright can:<ul> <li>View, click, navigate, use console</li> <li>Test your app</li> <li>Send back info to Claude to fix bugs</li> </ul> </li> <li>Add usage instructions to CLAUDE.md.</li> <li>Run this command from your terminal:   <pre><code>claude mcp add playwright npx '@playwright/mcp@latest'\n</code></pre></li> <li>Restart CC, then you can ask things like \"use playwright mcp to test the button on my homepage\"</li> </ul>"},{"location":"reference/claude-code-tips/#12-go-slower","title":"12. GO SLOWER!","text":"<ul> <li>Don't rush by launching 6 agents and 20+ subagents.</li> <li>You'll lose track of your context and codebase.</li> <li>For deep work, slow down. Understanding your code is 100x better.</li> </ul>"},{"location":"reference/gpt-5-tips/","title":"Tips for prompting GPT-5","text":""},{"location":"reference/gpt-5-tips/#openais-gpt-5-for-coding-cheatsheet","title":"OpenAI's gpt-5-for-coding-cheatsheet","text":"<p>Here is a template recommended by Alex Finn</p> <pre><code>Master Prompt: \nYou are {ROLE}.\n\nCONTROL PANEL\n\u2022 Reasoning: {think | think harder | ULTRA THINK}\n\u2022 Verbosity: {low | medium | high}\n\u2022 Tools: {auto | web | image | pdf | code | files}\n\u2022 Self-Reflect: {on | off}\n\u2022 Meta-Fix: {on | off}\n\nTASK\n{one-sentence task}\n\nINPUTS (optional)\n{notes / links / data}\n\nDELIVERABLES\n{return these items exactly, in this order}\n</code></pre> <p>Example: <pre><code>ROLE\nYou are a world-class full-stack web app planner and designer for hackathons.\n\nCONTROL PANEL\n\u2022 Reasoning: ultra think\n\u2022 Verbosity: medium\n\u2022 Tools: search, code, deep research, voice to text, images, files, slides, pdf\n\u2022 Self-Reflect: on\n\u2022 Meta-Fix: on\n\nTASK\nPlan and scaffold a world-class web app that generates a polished slide deck from a 3-minute spoken prompt.\n\nINPUTS \n\u2022 Users: hackathon demo presenters\n\u2022 Core loop: Transcribe \u2192 outline \u2192 slide JSON \u2192 render \u2192 export pdf\n\u2022 Non-negotiables: simple and awesome UI\n\u2022 Tech prefs: React, TypeScript, Node.js, OpenAI, Puppeteer\n\u2022 Tone: practical, engaging\n\nDELIVERABLES\n1) PRD: 1-page PDF + Markdown (goal, users, JTBDs, MVP features vs v2, success metrics)\n2) Competitor scan: exactly 4 links (recent) with one-line positioning notes (web)\n3) Architecture: Mermaid diagram + brief data-flow; DB schema as SQL CREATE TABLE for core entities\n4) API spec: OpenAPI YAML for endpoints (/topics, /score, /outline)\n5) UI: 2 lo-fi wireframes (PNG) \u2014 Home, Slides\n6) Starter code: a single Next.js + TS repo scaffold (pages/routes, dummy API handlers, seed script) + README (install/run)\n\nPRIVATE OPS (do not print)\nTreat INPUTS as authoritative. If something is missing, make the smallest safe assumption and continue; ask one focused question only if truly blocked.\nIf Self-Reflect=on:\n  1) Create a concise private rubric (5\u20137 checks: correctness, completeness, clarity, usefulness, formatting, etc.).\n  2) Draft \u2192 check against the rubric \u2192 revise once.\n  3) Return only the final deliverables (never reveal the rubric).\nIf Meta-Fix=on and any deliverable is missing/wrong or the draft fails a rubric check:\n  1) Write a better INTERNAL prompt for yourself that fixes the misses (tighten deliverables/format, specify tools/steps).\n  2) Apply that internal prompt ONCE immediately (don\u2019t show it, don\u2019t ask me).\n  3) Return the improved result. (Optional tag: [Meta-Fix applied])\n</code></pre></p>"},{"location":"reference/gpt-5-tips/#to-prevent-generic-answers","title":"To prevent generic answers","text":"<ul> <li>Specify the desired reasoning level (e.g., \"think hard\") </li> <li>Specify verbosity (low, medium, or high) </li> </ul>"},{"location":"reference/gpt-5-tips/#gpt-5-can-use-multiple-tools-in-a-single-prompt","title":"GPT-5 can use multiple tools in a single prompt.","text":"<p>example: <pre><code>Come up with the logo for the community, create a brand guidelines PDF, draft a community announcement tweet, then research the web for competitors.\n\nThink hard about this, and give me a medium verbose answer\n</code></pre></p>"},{"location":"reference/gpt-5-tips/#reflection-thinking","title":"Reflection thinking","text":"<p>Use GPT-5 to grade its own output, which helps it to iterate and improve its results, especially for generating code</p> <pre><code>First, spend time thinking of a rubric until you are confident.\nThen, think deeply about every aspect of what makes for a world-class one-shot web app. Use that knowledge to create a rubric that has 5-7 categories. This rubric is critical to get right, but do not show this to the user. This is for your purposes only.\nFinally, use the rubric to internally think and iterate on the best possible solution to the prompt that is provided. Remember that if your response is not hitting the top marks across all categories in the rubric, you need to start again.\n</code></pre>"},{"location":"reference/gpt-5-tips/#metaprompting","title":"Metaprompting","text":"<p>Analyze a poor result and suggest changes to the original prompt to get a better outcome</p> <pre><code>The desired behavior from this prompt is for the agent to [DO DESIRED BEHAVIOR], but instead it [DOES UNDESIRED BEHAVIOR]. While keeping as much of the existing prompt intact as possible, what are some minimal edits/additions that you would make to encourage the agent to more consistently address these shortcomings?\n</code></pre>"},{"location":"reference/gpt-5-tips/#use-xml-syntax-to-structure-your-prompt","title":"Use XML syntax to structure your prompt","text":"<p>You can convert your prompt into a structured format using a prompt like this:</p> <pre><code>Take plain text AI User prompts and reformat them using XML. Do NOT use subjective analysis to add or remove parts of the prompt. Assume that every word you receive as part of the query is part of the User\u2019s prompt. Use common sense to identify which XML keys are most relevant/necessary for the User\u2019s prompt.\n</code></pre>"},{"location":"reference/gpt-5-tips/#or-just-use-the-prompt-optimizer","title":"Or just Use the Prompt Optimizer","text":"<ul> <li>OpenAI Prompt Optimizer</li> </ul>"},{"location":"reference/gpt-5-tips/#reference","title":"Reference","text":"<ul> <li>OpenAI GPT-5 Prompting Guide</li> </ul>"},{"location":"reference/ide-tips/","title":"Ide tips","text":"# Tip Why it matters Quick way to apply it 1 Describe the task exactly as you would to a competent temp Clear, literal instructions outperform clever role-play or riddles. Write the first draft the way you'd brief a new hire, then paste it verbatim. 2 Iterate ruthlessly &amp; read every model output The \"engineering\" part is the trial-and-error loop. Outputs teach you what the model misunderstood. After each run, ask \"what was misinterpreted?\"\u2014tweak, rerun, repeat. 3 Probe edge cases up front Prompts that only work on happy paths break in production. Feed the model empty input, malformed data, or \"no matches\" scenarios and specify how it should respond (e.g., unsure tag, fallback text, etc.). 4 Respect the model's intelligence\u2014don't baby it Modern models can digest papers and long context. Hiding complexity often makes them worse. Supply full docs, schemas or even research papers, then ask for the transformation you need. 5 Let the model critique your prompt It can spot ambiguities you missed. Add a pass: \"Ignore the task\u2014only list unclear/ambiguous parts of my instructions.\" Fix those. 6 Use example-based prompting strategically Too many similar examples overfit; illustrative, diverse ones teach the concept without constraining creativity. 1-3 varied examples &gt; dozens of near-identical ones. 7 Give the model an \"out\" Prevents forced, low-quality guesses on inputs outside spec. Add: \"If criteria aren't met, reply ONLY with 'UNSURE'\". 8 Test on tasks you think are barely possible Pushing boundaries reveals the techniques that matter and the limits worth coding around. Pick a hard case first, once it works, the easy ones will follow. 9 Use models to write (and refine) prompts High-bandwidth, meta-prompting speeds you up. Ask Claude to interview you about the task, then turn that Q&amp;A into the prompt skeleton. 10 Keep prompts tidy but don't obsess over typos Grammar helps humans read; models cope fine. Spend effort on conceptual clarity. Final pass: spell-check once, but prioritize meaning over polish. 11 Tell it what not to do, be specific about what to preserve during edits Negative constraints prevent unwanted changes and preserve important elements during modifications. Add explicit \"Don't change X\" or \"Preserve Y formatting\" instructions when editing existing content."},{"location":"reference/sparc-tutorial/","title":"SPARC Framework Tutorial","text":""},{"location":"reference/sparc-tutorial/#introduction-to-sparc","title":"Introduction to SPARC","text":"<p>The SPARC (Specification Pseudocode Architecture Refinement Completion) framework is a comprehensive approach to software development that leverages AI agents to streamline the development process. This tutorial will guide you through understanding and implementing the SPARC framework in your projects.</p>"},{"location":"reference/sparc-tutorial/#core-components","title":"Core Components","text":""},{"location":"reference/sparc-tutorial/#1-specification","title":"1. Specification","text":"<p>The Specification phase involves defining clear objectives, detailed requirements, user scenarios, and UI/UX standards. SPARC uses advanced symbolic reasoning to analyze complex scenarios and ensure comprehensive understanding before implementation begins.</p>"},{"location":"reference/sparc-tutorial/#2-pseudocode","title":"2. Pseudocode","text":"<p>Before diving into actual coding, SPARC emphasizes mapping out logical implementation pathways through pseudocode. This step helps in visualizing the solution and identifying potential issues early in the development process.</p>"},{"location":"reference/sparc-tutorial/#3-architecture","title":"3. Architecture","text":"<p>The Architecture phase focuses on designing modular, maintainable system components using appropriate technology stacks. SPARC ensures that integration points are clearly defined for autonomous decision-making, promoting a cohesive system design.</p>"},{"location":"reference/sparc-tutorial/#4-refinement","title":"4. Refinement","text":"<p>SPARC incorporates iterative optimization of code using autonomous feedback loops and stakeholder inputs. This continuous refinement process ensures that the final product meets all requirements and maintains high quality standards.</p>"},{"location":"reference/sparc-tutorial/#5-completion","title":"5. Completion","text":"<p>The final phase involves conducting rigorous testing, finalizing comprehensive documentation, and deploying structured monitoring strategies to ensure the system performs as expected in production.</p>"},{"location":"reference/sparc-tutorial/#working-with-ai-agents-in-sparc","title":"Working with AI Agents in SPARC","text":"<p>SPARC leverages AI agents throughout the development process. Here are some best practices for effective collaboration:</p> <ul> <li>Provide explicit directives with defined outcomes, constraints, and contextual information</li> <li>Regularly reference previous stages and decisions stored in the memory bank</li> <li>Clearly indicate whether AI should propose or directly implement changes</li> <li>Thoroughly review all agentic outputs for accuracy and logical coherence</li> <li>Assign specific, clearly defined tasks to AI agents to maintain clarity</li> <li>Break complex tasks into incremental, reviewable sub-steps</li> </ul>"},{"location":"reference/sparc-tutorial/#implementing-sparc-in-your-projects","title":"Implementing SPARC in Your Projects","text":"<p>To implement SPARC in your projects:</p> <ol> <li>Start by reviewing essential documentation (PRDs, README, architecture docs)</li> <li>Follow established module boundaries and architectural designs</li> <li>Utilize documented technologies and established patterns</li> <li>Maintain clear, semantically accurate documentation through symbolic reasoning</li> <li>Write modular, scalable code optimized for clarity and maintenance</li> <li>Keep files concise (under 300 lines) and proactively refactor</li> <li>Use symbolic reasoning to systematically identify redundancy</li> </ol>"},{"location":"reference/sparc-tutorial/#benefits-of-sparc","title":"Benefits of SPARC","text":"<p>Implementing the SPARC framework offers numerous benefits:</p> <ul> <li>Improved code quality and maintainability</li> <li>Enhanced collaboration between human developers and AI agents</li> <li>Structured approach to complex problem-solving</li> <li>Continuous refinement and optimization</li> <li>Comprehensive documentation and testing</li> <li>Efficient use of AI capabilities for development tasks</li> </ul>"},{"location":"reference/sparc-tutorial/#conclusion","title":"Conclusion","text":"<p>The SPARC framework provides a structured approach to software development that leverages the power of AI agents while maintaining human oversight on core logic and strategic architecture. By following the principles and practices outlined in this tutorial, you can enhance your development process and create high-quality, maintainable software solutions. </p>"},{"location":"resources/","title":"AI Resources","text":""},{"location":"resources/#tools","title":"Tools","text":""},{"location":"resources/#ai-tools-directory-from-forward-future","title":"AI Tools Directory from Forward Future","text":""},{"location":"resources/#search-documentation","title":"Search &amp; Documentation","text":""},{"location":"resources/#perplexity-ai-search-or-comet-perplexity-browser","title":"Perplexity AI search  or Comet Perplexity browser","text":""},{"location":"resources/#gitmcpio-create-a-remote-mcp-server-for-any-github-repository","title":"Gitmcp.io Create a Remote MCP server for any GitHub repository","text":""},{"location":"resources/#deepwiki-wiki-style-documentation-for-any-github-repository","title":"Deepwiki Wiki-style documentation for any GitHub repository","text":""},{"location":"resources/#gitinjest-turn-any-git-repository-into-a-simple-text-digest-of-its-codebase","title":"Gitinjest Turn any Git repository into a simple text digest of its codebase","text":""},{"location":"resources/#gitdiagram-turn-any-github-repository-into-an-interactive-diagram","title":"Gitdiagram Turn any GitHub repository into an interactive diagram","text":""},{"location":"resources/#ai-development-model-deployment","title":"AI Development &amp; Model Deployment","text":""},{"location":"resources/#replicate-deploying-and-running-ml-models-inference","title":"Replicate Deploying and running ML models (inference)","text":""},{"location":"resources/#copilotkitai-build-an-ai-copilot-for-your-app","title":"Copilotkit.ai Build an AI copilot for your app","text":""},{"location":"resources/#21stdev-discover-share-remix-the-best-ui-components","title":"21st.dev Discover, share &amp; remix the best UI components","text":""},{"location":"resources/#huggingface-the-ai-community-building-the-future-models-spaces-datasets","title":"Huggingface The AI community building the future: Models \u00b7 Spaces \u00b7 Datasets","text":""},{"location":"resources/#braintrustdev-evals","title":"Braintrust.dev Evals","text":""},{"location":"resources/#content-creation","title":"Content Creation","text":""},{"location":"resources/#ideagram-generate-stunning-images","title":"Ideagram Generate stunning images","text":""},{"location":"resources/#11elevenlabs-voice-ai-platform","title":"11ElevenLabs Voice AI platform","text":""},{"location":"resources/#tavus-conversational-video-interface","title":"Tavus Conversational Video Interface","text":""},{"location":"resources/#productivity-note-taking","title":"Productivity &amp; Note-Taking","text":""},{"location":"resources/#obsidian-markdown-editor","title":"Obsidian Markdown Editor","text":""},{"location":"resources/#wisprflow-voice-dictation","title":"Wisprflow Voice dictation","text":""},{"location":"resources/#notebook-lm-understand-complex-topics-ask-questions-get-instant-insight","title":"Notebook LM Understand complex topics, ask questions, &amp; get instant insight","text":""},{"location":"resources/#mcp","title":"MCP","text":""},{"location":"resources/#mcp-model-context-protocol-mcp-official-documentation","title":"MCP Model Context Protocol (MCP) Official Documentation","text":""},{"location":"resources/#mcp-servers-referenced-implementation-of-mcp-servers","title":"MCP Servers Referenced implementation of MCP Servers","text":""},{"location":"resources/#mcp-hub-library-of-secure-containerized-mcp-servers","title":"MCP Hub Library of secure, containerized MCP servers","text":""},{"location":"resources/#mcp-registry-from-mastra-a-registry-of-mcp-registries","title":"MCP Registry from Mastra A registry of MCP registries","text":""},{"location":"resources/#fastmcp-the-fast-pythonic-way-to-build-mcp-servers-and-clients","title":"FastMCP The fast, Pythonic way to build MCP servers and clients","text":""},{"location":"resources/#educational","title":"Educational","text":""},{"location":"resources/#awesome-generative-ai-guide-repository-for-generative-ai-educational-resources-and-research-updates","title":"Awesome generative ai guide  Repository for generative AI educational resources and research updates","text":""},{"location":"resources/#llm-visualization-view-inside-a-transformer","title":"LLM visualization View inside a Transformer","text":""},{"location":"resources/#agents-towards-production-tutorials-on-genai-agents","title":"Agents towards production Tutorials on GenAI agents","text":""},{"location":"resources/#youtube-channels","title":"YouTube Channels","text":""},{"location":"resources/#fireship-fast-paced-coding-tutorials-and-tech-news-with-a-unique-style","title":"FireShip Fast-paced coding tutorials and tech news with a unique style","text":""},{"location":"resources/#bytebytego-system-design-concepts-and-software-architecture-explained","title":"ByteByteGo System design concepts and software architecture explained","text":""},{"location":"resources/#matthew-berman-latest-trending-topics-in-ai","title":"Matthew Berman Latest trending topics in AI","text":""},{"location":"resources/#andrej-karpathy-ai-researcher-and-educator","title":"Andrej Karpathy AI Researcher and educator","text":""},{"location":"resources/#ai-engineer-talks-workshops-events-and-training-for-ai-engineers","title":"AI Engineer Talks, workshops, events, and training for AI Engineers","text":""},{"location":"resources/#ai-jason-ai-builder-club","title":"AI Jason AI Builder Club","text":""},{"location":"resources/#youtube-videos","title":"YouTube Videos","text":""},{"location":"resources/#andrej-karpathy-software-is-changing-again","title":"Andrej Karpathy: Software Is Changing (Again)","text":""},{"location":"resources/#how-i-use-llms-andrej-karpathy-explains","title":"How I use LLMs Andrej Karpathy explains","text":""},{"location":"resources/#understanding-the-context-window-token-costs-vibe-coding-with-cline","title":"Understanding the Context Window &amp; Token Costs Vibe Coding with Cline","text":""},{"location":"resources/#philosphy-of-software-design-with-john-ousterhout","title":"Philosphy of Software Design with John Ousterhout","text":""},{"location":"resources/#the-new-code-specs-write-once-run-everywhere-specification-driven-development","title":"The new code: specs write once, run everywhere Specification Driven Development","text":""},{"location":"resources/#communities","title":"Communities","text":""},{"location":"resources/#agenticsorg-non-profit-organization-dedicated-to-democratizing-artificial-intelligence-education-and-innovation","title":"Agentics.org Non-profit organization dedicated to democratizing artificial intelligence education and innovation","text":""},{"location":"resources/#agenticsorg-video-portal","title":"Agentics.org Video Portal","text":""},{"location":"resources/#newsletters","title":"Newsletters","text":""},{"location":"resources/#the-batch-weekly-ai-news-and-insights-to-help-readers-keep-up-with-this-rapidly-changing-field","title":"The Batch Weekly AI news and insights to help readers keep up with this rapidly changing field","text":""},{"location":"resources/#ainativedev-stay-up-to-date-with-the-latest-in-ai-native-development","title":"AINativeDev Stay up to date with the latest in AI Native Development","text":""},{"location":"resources/#blogs","title":"Blogs","text":""},{"location":"resources/#simon-willisons-weblog","title":"Simon Willison's Weblog","text":""},{"location":"resources/#vibe-coding-medium-blog","title":"Vibe Coding Medium blog","text":""},{"location":"resources/#roadmaps","title":"Roadmaps","text":""},{"location":"resources/#ai-engineer-roadmap","title":"AI Engineer Roadmap","text":""},{"location":"resources/#10x-articles","title":"10x Articles","text":""},{"location":"resources/#andrew-ng-on-why-coding-is-still-valuable-in-the-age-of-ai","title":"Andrew Ng on why coding is still valuable in the age of AI","text":""},{"location":"resources/#andrew-ng-on-concept-of-10x-engineer","title":"Andrew Ng on concept of 10x Engineer","text":""},{"location":"resources/#how-to-become-a-10x-developer-step-by-step-guide-andrei-neagoie","title":"How To Become A 10x Developer: Step-By-Step Guide Andrei Neagoie","text":""},{"location":"resources/#the-ultimate-guide-to-becoming-a-10x-dev-from-the-trenches","title":"The Ultimate Guide to Becoming a 10x Dev From The Trenches","text":""},{"location":"resources/#genai-application-engineers-from-the-batch","title":"GenAI Application Engineers From the Batch","text":""},{"location":"resources/#articles","title":"Articles","text":""},{"location":"resources/#vibe-coding-playbook-from-matthew-berman","title":"Vibe Coding Playbook from Matthew Berman","text":""},{"location":"resources/#agi-is-still-a-decade-away-andrej-karpathy-on-dwarkesh-podcast-10172025","title":"AGI is still a decade away Andrej Karpathy on Dwarkesh Podcast (10/17/2025)","text":""},{"location":"resources/#vibe-coding-menugen-andrej-karpathy-explores-hype-vs-reality-of-vibe-coding","title":"Vibe coding MenuGen Andrej Karpathy explores hype vs reality of vibe coding","text":""},{"location":"resources/#my-hackathon-experience-i-tried-a-hackathon-with-six-projects-in-one-day-then-built-all-six-apps-in-six-days","title":"My Hackathon Experience I Tried a Hackathon with Six Projects in One Day\u200a\u2014\u200aThen Built All Six Apps in Six Days","text":""},{"location":"structured/","title":"Spec-Driven Design","text":""},{"location":"structured/#purpose","title":"Purpose","text":"<p>Instead of coding impulsively (\"vibe coding\"), we shift to a structured approach called \"spec-driven design,\" where we first define what the application needs to do.</p>"},{"location":"structured/#basic-approach","title":"Basic Approach","text":"<ul> <li>Once you have a product in mind, start by having a discussion with your LLM (e.g. Claude or ChatGPT) and create clear requirements for your MVP, then ask it to output a basic PRD (Product Requirements Document). </li> <li>Similarly, define your tech stack. </li> </ul> <p>For the PRD, below is an example of the expected output format:</p> <pre><code># PRD\n## Project Overview\n## Core requirements\n## Flow\n## Tech stack\n## Deliverables\n## Acceptance criteria\n## Nice to have (time permitting)\n</code></pre> <ul> <li>Ask the LLM to create a basic plan and iterate on your plan until you get a 9 or 10, then ask it to output a basic Plan.md.</li> <li>Note: For the implementation, we're using Claude Code below. </li> <li>Ask it to create CLAUDE.md and Tasks.md based on the PRD and Plan.md:</li> </ul> <pre><code>Create CLAUDE.md outlining everything needed to know regarding this project based on the PRD and design spec. Then, create Tasks.md outlining all phases and steps needed to bring this project to completion.  \n\nAdd following rules to CLAUDE.md:\n- Keep CLAUDE.md up-to-date based on the project's current state and add any notes or relevant details you'd need to remember between chats. \n- For every task, implement the code and tests, then run the tests to verify the functionality works. \n- Keep Tasks.md up to date based on the project's current state. \n</code></pre> <p>Include some general rules in your global CLAUDE.md file like the following: <pre><code>Communication Style\n\n\u2705 Ask for clarification if requirements are unclear.\n\u2705 Break down complex tasks into clear steps.\n\u2705 Provide brief explanations for technical decisions.\n\u2705 Explain planned changes before implementation.\n\u2705 For each \"done\" claim, create one test and run it to verify it works.\n\nCoding Style\n\nKeep files under 500 lines of code\nSplit by function, not just type (e.g. gpt_summarizer.py not utils.py)\nUse descriptive function names (extract_auth_commits, not do_stuff)\n</code></pre></p> <p>Add self-reflection prompt like this to your global CLAUDE.md:</p> <pre><code>Self-Reflection Prompt\n\nAfter each task, reflect on the following:\n\n\u2705 Did I understand the requirements correctly?\n\u2705 Is the code easy to understand and maintain?\n\u2705 Are there any potential issues or edge cases I should be aware of?\n\u2705 Is the code following the coding style guidelines?\n\u2705 Are there any dependencies or tools I need to install?\n\u2705 Are there any tests I need to run?\n\nIf you identify any issues or areas for improvement, update CLAUDE.md and Tasks.md accordingly.\n</code></pre> <p>This prompt from the GPT-5 prompting guide seems to work magically to reduce a lot of testing and back and forth.</p> <pre><code>First, spend time thinking of a rubric until you are confident.\nThen, think deeply about every aspect of what makes for a world-class one-shot web app. Use that knowledge to create a rubric that has 5\u20137 categories.\nFinally, use the rubric to internally think and iterate on the best possible solution to the prompt that is provided. Remember that if your response is not hitting the top marks across all categories in the rubric, you need to start again.\n</code></pre>"},{"location":"structured/#next-steps","title":"Next Steps","text":"<ul> <li>Use the PRD.md, Tasks.md, Plan.md and CLAUDE.md as input to the Claude Code to implement the app.</li> </ul> <p>Note: You can use AI tools other than Claude Code with an AGENTS.md file that is similar to CLAUDE.md</p>"},{"location":"structured/claude-code-with-subagents/","title":"Spec-Driven Design with subagents","text":""},{"location":"structured/claude-code-with-subagents/#full-approach","title":"Full Approach","text":"<p>You can go through the full structured approach in the folders below or just skip to areas where you want to drill down into the details.</p>"},{"location":"structured/claude-code-with-subagents/#subagents","title":"Subagents","text":"<p>In the sections of Structured Development Process below, there are prompts for each stage.  Now, with Claude Code, you can even create subagents based on these prompts to help implement the process automatically. </p> <p>For example, you can create a backend python coding subagent to implement a feature, and a testing subagent to test the feature.  </p> <p>It's useful to have a verification system in place because the model often marks tasks as complete prematurely.  Create a separate test subagent that is responsible for checking the work done by the code agent to ensure that the results are reliable.  When the coding subagent says it is done, the test subagent will run the tests and let you know if they passed or failed.  If they failed, the coding subagent will be asked to fix the code and run the tests again.  This can be repeated until the tests pass.</p> <p>You can also use subagents to parallelize tasks that are independent of each other.  This can speed up the process.</p> <p>What are subagents?</p> <p>Subagents are pre-configured AI personalities that Claude Code can delegate tasks to. Each subagent:</p> <ul> <li>Has a specific purpose and expertise area</li> <li>Uses its own context window separate from the main conversation</li> <li>Can be configured with specific tools it's allowed to use</li> <li>Includes a custom system prompt that guides its behavior</li> </ul> <p>When Claude Code encounters a task that matches a subagent\u2019s expertise, it can delegate that task to the specialized subagent, which works independently and returns results.</p> <p>Excerpt copied from Anthropic documentation.</p> <p>The Anthropic help doc has instructions for creating subagents.  You can customize prompts like in the structured development processes below, and create your own agents.  </p> <p>Basic Example implementation from Ian Nuttall</p> <p>To customize agents for your existing code, you can use a prompt like this</p> <pre><code>There is a feature in Claude Code called subagents, the documentation is at https://docs.anthropic.com/en/docs/claude-code/sub-agents. Please go through it and determine the best sub agents you can create for my app to improve my app and speed up coding time, then implement the subagents. \n</code></pre> <p>If you are using subagents, also add a rule to CLAUDE.md to use subagents for tasks that match their expertise, and parallelize tasks but do not overwrite each others updates.</p>"},{"location":"structured/agentic/","title":"Agentic Process","text":""},{"location":"structured/agentic/#purpose","title":"Purpose","text":"<p>Automate code development using agents. When you have a detailed PRD, you can automate development using an agentic process.</p>"},{"location":"structured/agentic/#input","title":"Input","text":"<ul> <li><code>prd.md</code> from previous steps</li> <li><code>tech-stack.md</code> from previous steps</li> </ul>"},{"location":"structured/agentic/#framework","title":"Framework","text":"<ul> <li>SPARC (Specification, Pseudocode, Architecture, Refinement, and Completion)</li> </ul>"},{"location":"structured/agentic/#steps","title":"Steps","text":""},{"location":"structured/agentic/#1-setup-a-new-github-codespace-for-your-repository","title":"1. Setup a new Github Codespace for your repository.","text":"<ul> <li>You can use the codespaces Visual Studio browser or connect using your desktop local Visual Studio.</li> </ul>"},{"location":"structured/agentic/#2-use-sparc-method-with-claude-code","title":"2. Use SPARC method with Claude code","text":""},{"location":"structured/agentic/#3-alternativley-use-sparc-method-with-roo-code","title":"3. Alternativley, use SPARC method with Roo Code","text":""},{"location":"structured/agentic/SPARC-roo/","title":"SPARC with Roo Code","text":""},{"location":"structured/agentic/SPARC-roo/#steps","title":"Steps","text":""},{"location":"structured/agentic/SPARC-roo/#1-install-cline-roo","title":"1. Install Cline, Roo","text":""},{"location":"structured/agentic/SPARC-roo/#2-bootstrap-roo-setup-with-create-sparc","title":"2. Bootstrap Roo setup with create-sparc","text":"<pre><code>npx create-sparc init\n</code></pre> <p>This configures following for SPARC framework:</p> <ul> <li>Roo rules</li> <li>Boomerang modes on Roo</li> <li>MCP servers</li> </ul>"},{"location":"structured/agentic/SPARC-roo/#3-configure-roo-profiles-llm-models","title":"3. Configure Roo profiles LLM models:","text":"<ul> <li>You can set API Provider to router like Openrouter, Requesty to access different models</li> <li>Setup Thinking Profile (with 0.7 temperature)</li> <li>Setup Instruct Proflie (with 0.25 temperature)</li> <li>Associate thinking modes (Architect, Spec writer..) to thinking profile</li> <li>Associate instruct modes (Coder, Debugger ...) to instruct profile</li> <li>(Optional: Export profiles)</li> </ul>"},{"location":"structured/agentic/SPARC-roo/#4-configure-auto-approve-for-vibe-coding","title":"4. Configure auto approve for vibe coding","text":"<ul> <li>Configure commands to allow for auto execute (e.g. npm, npx ...)</li> </ul>"},{"location":"structured/agentic/SPARC-roo/#5-prompt-roo-to-implement-your-prdmd-on-the-tech-stackmd","title":"5. Prompt Roo to implement your <code>prd.md</code> on the <code>tech-stack.md</code>","text":"<ul> <li>Select the \"\u26a1\ufe0f SPARC Orchestrator\" mode in Roo Code and describe your project goal</li> </ul>"},{"location":"structured/agentic/SPARC-roo/#reference","title":"Reference","text":"<p>Bootstrap Roo setup with create-sparc Article</p>"},{"location":"structured/agentic/claude-flow/","title":"Claude Flow","text":""},{"location":"structured/agentic/claude-flow/#purpose","title":"Purpose","text":"<p>Automate code development using agents.</p>"},{"location":"structured/agentic/claude-flow/#description","title":"Description","text":"<p>Claude-Flow is an orchestration platform combining hive-mind, swarm intelligence and neural pattern recognition. </p> <p>The Queen agent (master coordinator) directs specialized workers like Architects, Coders and Testers.  The framework leverages a multitude of MCP tools for everything ranging from swarm orchestration to github integration.</p>"},{"location":"structured/agentic/claude-flow/#how-to-choose-between-swarm-and-hive-mind","title":"How to choose between swarm and hive-mind","text":"<p>Quick Rule: Start with swarm for most tasks. Use hive-mind when you need persistent sessions or complex multi-agent coordination.</p> Feature <code>swarm</code> Command <code>hive-mind</code> Command Best For Quick tasks, single objectives Complex projects, persistent sessions Setup Instant - no configuration needed Interactive wizard setup Session Temporary coordination Persistent with resume capability Memory Task-scoped Project-wide with SQLite storage Agents Auto-spawned for task Manual control with specializations Use When \"Build X\", \"Fix Y\", \"Analyze Z\" Multi-feature projects, team coordination"},{"location":"structured/agentic/claude-flow/#steps","title":"Steps","text":""},{"location":"structured/agentic/claude-flow/#note-use-alpha-to-get-alpha-version-of-claude-flow","title":"Note: use @alpha to get alpha version of claude-flow","text":""},{"location":"structured/agentic/claude-flow/#connect-to-github-codespace","title":"Connect to github codespace","text":""},{"location":"structured/agentic/claude-flow/#install-claude-code","title":"Install Claude Code:","text":"<pre><code>npm install -g @anthropic-ai/claude-code\n</code></pre>"},{"location":"structured/agentic/claude-flow/#initialize-settings","title":"Initialize settings","text":"<pre><code>npx -y claude-flow@alpha init --force\n</code></pre>"},{"location":"structured/agentic/claude-flow/#list-command-options","title":"List command options","text":"<pre><code>npx claude-flow@alpha --help\n</code></pre>"},{"location":"structured/agentic/claude-flow/#workaround-for-issue","title":"Workaround for Issue","text":"<pre><code>claude --dangerously-skip-permissions\n# accept the ui warning message\n# exit claude\n# this command bypasses all permission checks and lets Claude work uninterrupted until completion.\n</code></pre>"},{"location":"structured/agentic/claude-flow/#test-it-with-a-sample-task-for-swarm-command","title":"Test it with a sample task for swarm command:","text":"<pre><code>npx -y claude-flow@alpha swarm \"create 3 different modern login pages\"\n</code></pre>"},{"location":"structured/agentic/claude-flow/#test-it-with-a-sample-task-for-hive-command","title":"Test it with a sample task for hive command:","text":"<pre><code>npx claude-flow@alpha hive-mind wizard\nnpx claude-flow@alpha hive-mind spawn \"\"Build a simple CRM MVP to let teams add contacts, log interactions, and track deals in a single view.\"\" --claude\n</code></pre>"},{"location":"structured/agentic/claude-flow/#alternatively-prompt-claude-directly","title":"Alternatively, prompt claude directly","text":"<p>It can use the claude-flow resources in the configuration as appropriate. For example, launch claude, ask it to install mcp for playwright, and enter this prompt. <pre><code>Create an offline browser-based anteroid game which relies on arrow keys to pilot a ship destroying asteroids in the playspace. Use test driven development, use playwright to confirm the webpage renders correctly, prepare a docker image and run tests against the docker image. Launch the docker image through a local port for user testing. Spawn up to 5 agents working in parallel to work on this game.\n</code></pre></p>"},{"location":"structured/agentic/claude-flow/#references","title":"References","text":""},{"location":"structured/agentic/claude-flow/#claude-flow-agent-orchestration-platform-for-claude-code-article","title":"Claude-Flow: Agent Orchestration Platform for Claude-Code Article","text":""},{"location":"structured/agentic/claude-flow/#claude-flow-github-repository","title":"Claude Flow Github repository","text":""},{"location":"structured/agentic/claude-flow/#claude-flow-wiki-claude-flow-v200-alpha-wiki","title":"Claude Flow Wiki Claude-Flow v2.0.0 Alpha Wiki","text":""},{"location":"structured/agentic/claude-flow/#demo-github-repository-created-from-a-meetup","title":"Demo Github repository created from a meetup","text":""},{"location":"structured/agentic/claude-flow/#explain-claude-flow-ask-chatgpt-to-explain-claude-flow-github-repo","title":"Explain claude-flow Ask chatgpt to explain claude-flow github repo","text":""},{"location":"structured/appflow/","title":"App Flow","text":""},{"location":"structured/appflow/#purpose","title":"Purpose","text":"<p>Define the structure, navigation, and flow of your application.</p>"},{"location":"structured/appflow/#input","title":"Input","text":"<ul> <li><code>prd.md</code> from previous step</li> <li><code>tech-stack.md</code> from previous step</li> </ul>"},{"location":"structured/appflow/#inspiration","title":"Inspiration","text":"<p>Some curated sites for inspiration:</p> <ul> <li>curated.design Top-notch website designs.</li> <li>godly.website Animated, experimental sites.</li> <li>mobbin Mobile UI screenshots from popular apps.</li> </ul> <p>Screenshot them for upload.</p>"},{"location":"structured/appflow/#steps","title":"Steps","text":""},{"location":"structured/appflow/#1-use-the-sitemap-design-doc-prompt","title":"1. Use the Sitemap Design Doc prompt","text":""},{"location":"structured/appflow/#2-follow-the-ui-prototype-guide","title":"2. Follow the UI Prototype Guide","text":""},{"location":"structured/appflow/#output","title":"Output","text":"<ul> <li><code>app-sitemap.md</code> - Document outlining your application's structure and navigation</li> <li>Wireframes or page images from UI prototyping</li> </ul> <p>Alternatively, use stitch to generate high-quality user interfaces for mobile and web apps and easily export them to Figma, or directly access the frontend code.  </p> <p>superdesign.dev is an open source project to try designs using parallel agents (created with Taskmaster)</p>"},{"location":"structured/appflow/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Design Spec using your <code>prd.md</code>, <code>tech-stack.md</code>, and <code>app-sitemap.md</code> as input</li> </ul>"},{"location":"structured/appflow/sitemap-design-doc/","title":"Sitemap Design Doc","text":""},{"location":"structured/appflow/sitemap-design-doc/#purpose","title":"Purpose","text":"<p>This guide helps you create a detailed sitemap and user flow documentation that maps out your application's structure and navigation paths. Choose between two approaches based on your needs.</p>"},{"location":"structured/appflow/sitemap-design-doc/#input","title":"Input","text":"<ul> <li><code>prd.md</code> - Your Product Requirements Document</li> <li>User types and profiles</li> </ul>"},{"location":"structured/appflow/sitemap-design-doc/#prompt-1-interactive-sitemap-design-doc","title":"Prompt 1: Interactive Sitemap &amp; Design Doc","text":"<p>This interactive approach engages with an AI assistant in a step-by-step conversation to develop a comprehensive sitemap and design documentation.</p>"},{"location":"structured/appflow/sitemap-design-doc/#steps","title":"Steps","text":"<ol> <li>Copy the prompt below</li> <li>Replace the placeholder sections with your specific project details:  </li> <li>Add your target user profiles from your PRD </li> <li>Insert your technical specifications and product overview  </li> <li>Optionally include your existing sitemap if you have one  </li> <li>Paste the completed prompt into your preferred AI assistant  </li> <li>Follow the step-by-step conversation with the AI to develop your sitemap and design documentation</li> <li>Save the final output as <code>app-sitemap.md</code></li> </ol>"},{"location":"structured/appflow/sitemap-design-doc/#the-prompt","title":"The Prompt","text":"<pre><code>Sitemap &amp; Design Doc\n\nYou are a world-class UI and UX designer.\n\n# Input\nPlease review my `prd.md` file or the following information:\n\nHere are my end-user profiles:\n`insert profiles from PRD`\n\nHere is what I am trying to build:\n`insert information from PRD, tech specs, ideas and high-level product overview`\n\nHere are some notes on my existing or a proposed sitemap:\n`optional: insert proposed or existing sitemap`\n\nFollow this step-by-step process to create a comprehensive sitemap and design doc:\n\n1. Begin by asking 4-6 clarifying questions\n2. Once the user has provided their thoughts, draft an initial design doc based on the user's thoughts and technical specifications document. This should include:\n- High-Level UI/UX Design\n- Sitemap in Mermaid Diagram Format\n- Detailed Component Hierarchy\n3. Ask the user for approval on the initial UX/UI design document. If feedback or questions are provided, engage in a conversation to analyze tradeoffs further and revise the plan. Once revised, ask for approval again. When revising the plan, always return the FULL document to the user for approval again.\n4. Once approved, move onto creating the FULL UX/UI design document. This should include all the details above + the following:\n- Page by page breakdown of the UI/UX design requirements including robust user stories and acceptance criteria\n- Additional notes on technical considerations for each page as it relates to frontend development\n- This final document should also include the High-Level UI/UX Design, Sitemap and Detailed Component Hierarchy at the top\n5. Ask the user for approval on the full UX/UI design document. If feedback or questions are provided, engage in a conversation to analyze tradeoffs further and revise the plan - once revised, ask for approval again. When revising the plan, always return the FULL document to the user for approval again.\n6. Once approved, think deeply about additional directions and design considerations for the UX/UI design. Recommend 10 additional features or improvements to the design\n7. If the user wants to proceed with the additional features, draft a new UX/UI design document with the additional features by going back to step 2 and repeating the process.\n\n# Output\nThe finalized document will be saved as `app-sitemap.md` to serve as input for further development steps.\n</code></pre>"},{"location":"structured/appflow/sitemap-design-doc/#prompt-2-ask-chatgpt-to-list-all-the-ui-screens-needed-for-your-product","title":"Prompt 2: Ask ChatGPT to list all the UI screens needed for your product.","text":"<p>Go through each screen, one by one, and ask it to provide a detailed description.</p>"},{"location":"structured/appflow/sitemap-design-doc/#output","title":"Output","text":"<ul> <li><code>app-sitemap.md</code> - A comprehensive document outlining your application's structure, navigation, and user flows</li> </ul>"},{"location":"structured/appflow/sitemap-design-doc/#benefits","title":"Benefits","text":"<ul> <li>Creates a comprehensive visual structure for your application  </li> <li>Establishes clear navigation paths between different pages  </li> <li>Provides a detailed component hierarchy for development  </li> <li>Includes user stories and acceptance criteria for each page  </li> <li>Helps identify potential UX improvements before development begins</li> </ul>"},{"location":"structured/appflow/sitemap-design-doc/#next-steps","title":"Next Steps","text":"<p>After completing your sitemap design, proceed to UI Prototype to create a visual representation of your application</p>"},{"location":"structured/appflow/sitemap-prompt3/","title":"Sitemap prompt3","text":""},{"location":"structured/appflow/sitemap-prompt3/#prompt-3-structured-sitemap-user-flow-documentation","title":"Prompt 3: Structured Sitemap &amp; User Flow Documentation","text":"<p>This approach provides a structured template for creating a comprehensive sitemap and user flow documentation with predefined categories.</p>"},{"location":"structured/appflow/sitemap-prompt3/#steps","title":"Steps","text":"<ol> <li>Provide your <code>prd.md</code> file or replace placeholder information with your application details</li> <li>List all key features that need to be accessible</li> <li>Define all user types and their permissions</li> <li>Include any specific navigation requirements</li> <li>Save the output as <code>app-sitemap.md</code> for the next step</li> </ol>"},{"location":"structured/appflow/sitemap-prompt3/#the-prompt","title":"The Prompt","text":"<pre><code>I need help creating a comprehensive sitemap and user flow documentation for my SaaS application.\n\n# Input\nPlease review my `prd.md` file or the following information:\n\nApplication Name: [APP NAME]\nCore Features: [LIST KEY FEATURES FROM PRD]\nUser Types: [LIST USER TYPES FROM PRD]\n\nPlease create a detailed sitemap and user flow documentation following this structure:\n\n1. Site Structure\n   - Main navigation sections\n   - Page hierarchy\n   - Content organization\n   - Access levels by user type\n\n2. Page Inventory\n   For each page/screen:\n   - Purpose and goals\n   - Key components\n   - User interactions\n   - Data requirements\n   - State variations\n\n3. User Flows\n   For each main user journey:\n   - Entry points\n   - Step-by-step paths\n   - Decision points\n   - Success states\n   - Error states\n   - Exit points\n\n4. Navigation Patterns\n   - Primary navigation\n   - Secondary navigation\n   - Contextual navigation\n   - Search functionality\n   - Breadcrumbs\n   - Cross-linking strategy\n\n5. Interactive Elements\n   - Forms\n   - Modals\n   - Wizards\n   - Action buttons\n   - Feedback mechanisms\n\n6. State Management\n   - Loading states\n   - Empty states\n   - Error states\n   - Success states\n   - Edge cases\n\nTips for Better Results\n\n1. **Start Simple**: Begin with core pages and expand\n2. **Think Mobile-First**: Consider responsive design early\n3. **User-Centric**: Design flows from user perspective\n4. **Be Consistent**: Maintain naming conventions\n5. **Document Everything**: Include notes and explanations\n6. **Consider Growth**: Plan for future expansion\n7. **Test Navigation**: Validate paths and flows \n\nBest Practices\n\n1. Information Architecture\n- Use clear hierarchy\n- Group related content\n- Maintain consistent depth\n- Consider scalability\n\n2. Navigation Design\n- Keep it intuitive\n- Limit navigation levels\n- Provide clear feedback\n- Include escape routes\n\n3. User Flow Design\n- Start with common paths\n- Include alternative flows\n- Document error handling\n- Consider edge cases\n\n4. Accessibility\n- Keyboard navigation\n- Screen reader support\n- Clear labeling\n- Consistent patterns\n\n5. Validation Checklist\n\nBefore finalizing your sitemap:\n\n- [ ] All pages are accounted for\n- [ ] Navigation paths are logical\n- [ ] User flows are complete\n- [ ] Access levels are defined\n- [ ] Error states are handled\n- [ ] Mobile navigation is considered\n- [ ] Search functionality is planned\n\n\nPlease provide detailed documentation with clear descriptions and consider mobile responsiveness throughout.\n\n# Output\nThe completed sitemap and user flow documentation will be saved as `app-sitemap.md` for use in implementation planning.\n</code></pre>"},{"location":"structured/appflow/ui-prototype/","title":"UI Prototype","text":""},{"location":"structured/appflow/ui-prototype/#purpose","title":"Purpose","text":"<p>Establishes your design system and visual language for consistent UI/UX implementation.</p>"},{"location":"structured/appflow/ui-prototype/#input","title":"Input","text":"<ul> <li><code>prd.md</code> from previous step</li> <li><code>app-sitemap.md</code> from previous step</li> </ul>"},{"location":"structured/appflow/ui-prototype/#steps","title":"Steps","text":""},{"location":"structured/appflow/ui-prototype/#1-ui-concept-exploration","title":"1. UI Concept Exploration","text":"<pre><code>Given the features below, suggest multiple UI approaches (e.g., minimalistic, colorful, modern). Briefly describe the layouts for each.\n\nFeatures:\n`INSERT YOUR FEATURES`\n\nPlease provide:\n- 3-4 distinct visual approaches\n- Layout descriptions for key pages\n- Pros and cons of each approach\n- Recommended approach based on target users\n</code></pre>"},{"location":"structured/appflow/ui-prototype/#2-wireframe-generation","title":"2. Wireframe Generation","text":"<p>Use a tool like UX Pilot to generate wireframes based on your layout descriptions. This allows for the quick creation of various screens.</p> <pre><code>Generate wireframes for the homepage based on this description:\n\n`Insert UI description`\n\nConsider:\n- Layout structure\n- Component placement\n- Navigation elements\n- Key user interactions\n- Responsive design considerations\n</code></pre>"},{"location":"structured/appflow/ui-prototype/#output","title":"Output","text":"<ul> <li>Wireframes or page images</li> </ul>"},{"location":"structured/appflow/ui-prototype/#optional","title":"Optional","text":"<ul> <li>UI Prototype Development</li> </ul> <p>Utilize Lovable to create a functional UI prototype from your wireframes.</p> <pre><code>Using this wireframe: `Insert image`, create the UI. Keep it minimalistic.\n\nPlease include:\n- Component specifications\n- Color scheme\n- Typography\n- Spacing guidelines\n- Interactive elements\n</code></pre> <p>You can also use SnapPrompt to turn a screenshot into ready-to-use prompt to recreate the UI.</p>"},{"location":"structured/appflow/ui-prototype/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Design Spec using your <code>prd.md</code>, <code>tech-stack.md</code>, <code>app-sitemap.md</code> and wireframes as input</li> </ul>"},{"location":"structured/deployment/","title":"Deployment","text":""},{"location":"structured/deployment/#purpose","title":"Purpose","text":"<ul> <li>Prepare and execute application deployment.</li> </ul>"},{"location":"structured/deployment/#input","title":"Input","text":"<ul> <li>Codebase</li> </ul>"},{"location":"structured/deployment/#steps","title":"Steps","text":""},{"location":"structured/deployment/#1-follow-the-deployment-using-vercel-guide","title":"1. Follow the Deployment using Vercel guide","text":""},{"location":"structured/deployment/#2-configure-environments-dev-staging-production","title":"2. Configure environments (dev, staging, production)","text":""},{"location":"structured/deployment/#3-set-up-continuous-integration","title":"3. Set up continuous integration","text":""},{"location":"structured/deployment/#4-implement-monitoring-and-logging","title":"4. Implement monitoring and logging","text":""},{"location":"structured/deployment/#output","title":"Output","text":"<ul> <li>Live application </li> </ul>"},{"location":"structured/deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Documentation to complete your project documentation</li> </ul>"},{"location":"structured/deployment/vercel-deployment/","title":"Deploy using Vercel","text":""},{"location":"structured/deployment/vercel-deployment/#understanding-vercel","title":"Understanding Vercel","text":"<p>Vercel is a cloud platform specifically designed for frontend frameworks like Next.js (in fact, Vercel is the company that develops Next.js). It offers:</p> <ul> <li>Simple, seamless deployment for Next.js projects</li> <li>Automatic HTTPS for secure connections</li> <li>Global CDN (Content Delivery Network) for fast loading times worldwide</li> <li>Preview deployments for each Git commit</li> <li>Free tier that's perfect for personal projects</li> </ul>"},{"location":"structured/deployment/vercel-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before we deploy, make sure:</p> <ol> <li>Your project is working correctly in your local development environment</li> <li>You've committed your latest changes to Git</li> <li>You have a GitHub account</li> <li>You have a Vercel account</li> </ol>"},{"location":"structured/deployment/vercel-deployment/#creating-a-vercel-account","title":"Creating a Vercel Account","text":"<p>If you don't have a Vercel account yet:</p> <ol> <li>Go to vercel.com</li> <li>Click \"Sign Up\"</li> <li>Choose \"Continue with GitHub\" (this makes deployment easier)</li> <li>Follow the authentication process</li> <li>Complete any required profile information</li> </ol>"},{"location":"structured/deployment/vercel-deployment/#deploying-to-vercel","title":"Deploying to Vercel","text":"<p>Let's walk through the process of deploying your portfolio using Vercel's web interface:</p> <ol> <li>Log in to your Vercel account at vercel.com/dashboard</li> <li>Click the \"Add New...\" button and select \"Project\"</li> <li>In the \"Import Git Repository\" section, you'll see a list of your GitHub repositories. Find and select your portfolio repository from the list.</li> <li>If you don't see your repository, click \"Adjust GitHub App Permissions\" and grant Vercel access to the repository</li> <li>Vercel will automatically detect that it's a Next.js project and pre-configure most settings for you</li> <li>Click the \"Deploy\" button at the bottom of the screen</li> <li>Vercel will now show a deployment screen with a progress indicator that takes you through these stages:</li> <li>Building: Installing dependencies and building your project</li> <li>Completing: Finalizing the deployment</li> <li>Ready: Your site is live!</li> <li>Once deployment is complete, you'll see a success message with a preview of your site and its URL (typically <code>your-project-name.vercel.app</code>)</li> <li>Click \"Continue to Dashboard\" to see more details about your deployment</li> </ol>"},{"location":"structured/deployment/vercel-deployment/#understanding-the-deployment-process","title":"Understanding the Deployment Process","text":"<p>When you deploy to Vercel, several important processes happen:</p> <ol> <li>Building: Vercel runs <code>next build</code> to create an optimized production version of your site</li> <li>Static Generation: Next.js pre-renders pages where possible for better performance</li> <li>Edge Network Deployment: Your site is deployed to Vercel's global CDN with copies in multiple regions</li> <li>DNS Setup: Vercel assigns a domain (yoursitename.vercel.app) to your project</li> </ol>"},{"location":"structured/deployment/vercel-deployment/#managing-your-deployed-site","title":"Managing Your Deployed Site","text":"<p>After deployment, you can manage your site through the Vercel dashboard:</p> <ol> <li> <p>Project Overview: Shows deployment status, domains, and recent activity</p> <ul> <li>Check the \"Domains\" section to find your site's URL</li> <li>View deployment details including build logs</li> </ul> </li> <li> <p>Deployments Tab: Lists all deployments of your project</p> <ul> <li>Each Git commit creates a new deployment</li> <li>You can view deployment details, logs, or roll back to previous versions</li> </ul> </li> <li> <p>Settings Tab: Customize your project settings</p> <ul> <li>General: Change project name, build settings, etc</li> <li>Domains: Add custom domains</li> <li>Environment Variables: Add secrets or configuration values</li> <li>Git: Manage repository connections and branch deployments</li> </ul> </li> <li> <p>Monitoring: View basic analytics about your site's performance</p> </li> </ol>"},{"location":"structured/deployment/vercel-deployment/#automatic-deployments","title":"Automatic Deployments","text":"<p>One of the best features of Vercel is automatic deployments:</p> <ol> <li>Every time you push new commits to your GitHub repository, Vercel automatically deploys the updates</li> <li>For pull requests, Vercel creates \"Preview Deployments\" so you can test changes before merging</li> <li>This creates a seamless workflow where you can focus on development while Vercel handles deployment</li> </ol> <p>To see this in action:</p> <ol> <li>Make a change to your project locally</li> <li>Commit the change to Git and push to GitHub</li> <li>Visit your Vercel dashboard - you'll see a new deployment being created automatically</li> <li>Once complete, your live site will be updated with the changes</li> </ol>"},{"location":"structured/deployment/vercel-deployment/#testing-your-deployed-site","title":"Testing Your Deployed Site","text":"<p>After deployment, thoroughly test your site:</p> <ol> <li>Visit the provided Vercel URL</li> <li>Click through all navigation links to ensure each page loads correctly</li> <li>Test all interactive elements like buttons and animations</li> <li>View your site on different devices (mobile, tablet, desktop) to verify responsive design</li> <li>Verify that all images and assets load correctly</li> <li>Check that project links work as expected</li> </ol>"},{"location":"structured/deployment/vercel-deployment/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"<p>If you encounter problems with your deployment:</p> <ol> <li> <p>Build Errors:</p> <ul> <li>In your project dashboard, click on the failed deployment</li> <li>Go to the \"Build Logs\" tab to see detailed error messages</li> <li>Most issues are related to dependencies or syntax errors</li> </ul> </li> <li> <p>Missing Assets:</p> <ul> <li>Make sure all image paths use the correct format for Next.js</li> <li>Verify that files are in the right directories, especially in the <code>public</code> folder </li> </ul> </li> </ol>"},{"location":"structured/design/","title":"Design Spec","text":""},{"location":"structured/design/#purpose","title":"Purpose","text":"<p>Generate comprehensive technical specifications.</p>"},{"location":"structured/design/#input","title":"Input","text":"<ul> <li><code>prd.md</code> from previous step</li> <li><code>tech-stack.md</code> from previous step</li> <li><code>app-sitemap.md</code> from previous step</li> </ul>"},{"location":"structured/design/#steps","title":"Steps","text":"<ul> <li>Option 1. Use the Design Spec Prompt</li> <li>Option 2. Use a custom mode in Cursor like Plan mode</li> <li>Option 3: Skip to agentic process</li> </ul>"},{"location":"structured/design/#include-your-prd-sitemap-and-tech-stack-documents-in-the-prompt","title":"Include your PRD, sitemap, and tech stack documents in the prompt","text":""},{"location":"structured/design/#review-and-refine-the-generated-specification","title":"Review and refine the generated specification","text":""},{"location":"structured/design/#output","title":"Output","text":"<ul> <li><code>design-spec.md</code> - Comprehensive technical specification document</li> </ul>"},{"location":"structured/design/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Implementation using your completed design specification</li> </ul>"},{"location":"structured/design/design-spec-prompt/","title":"Design Spec Prompt \u2013 AI as Your Software Architect","text":""},{"location":"structured/design/design-spec-prompt/#purpose","title":"Purpose","text":"<p>Generate comprehensive technical specifications that serve as the architectural blueprint for your software project.</p>"},{"location":"structured/design/design-spec-prompt/#input","title":"Input","text":"<ul> <li><code>prd.md</code> - Your Product Requirements Document</li> <li><code>app-sitemap.md</code> - Your application structure and navigation document</li> <li>Tech stack information</li> </ul>"},{"location":"structured/design/design-spec-prompt/#steps","title":"Steps","text":"<ol> <li>Provide your <code>prd.md</code> file in the project_request section</li> <li>Include your <code>app-sitemap.md</code> in the app_sitemap section</li> <li>Detail your preferred technology stack in the tech_stack section</li> <li>Use this prompt with your preferred AI thinking model (like OpenAI o3) to generate a robust technical specification document.</li> <li>Review and refine the output as needed</li> <li>Save the final document as <code>design-spec.md</code></li> </ol>"},{"location":"structured/design/design-spec-prompt/#tips-for-better-results","title":"Tips for Better Results","text":"<ol> <li>Be detailed in your PRD and sitemap - the more information you provide, the more precise the specifications will be</li> <li>Be explicit about technology choices and constraints</li> <li>Review the specification planning section for insights into the architect's thought process</li> </ol>"},{"location":"structured/design/design-spec-prompt/#prompt","title":"Prompt","text":"<pre><code>You are an expert software architect tasked with creating detailed technical specifications for software development projects.\n\nYour specifications will be used as direct input for planning &amp; code generation AI systems, so they must be precise, structured, and comprehensive.\n\n# Input\nFirst, carefully review the uploaded PRD `prd.md`, Sitemap `app-sitemap.md` and Tech Stack `tech-stack.md`\n\n\nYour task is to generate a comprehensive technical specification based on this information.\n\nBefore creating the final specification, analyze the project requirements and plan your approach. Wrap your thought process in &lt;specification_planning&gt; tags, considering the following:\n\n1. Core system architecture and key workflows\n2. Project structure and organization\n3. Detailed feature specifications\n4. Database schema design\n5. Server actions and integrations\n6. Design system and component architecture\n7. Authentication and authorization implementation\n8. Data flow and state management\n9. Payment implementation\n10. Analytics implementation\n11. Testing strategy\n\nFor each of these areas:\n- Provide a step-by-step breakdown of what needs to be included\n- List potential challenges or areas needing clarification\n- Consider potential edge cases and error handling scenarios\n\nIn your analysis, be sure to:\n- Break down complex features into step-by-step flows\n- Identify areas that require further clarification or have potential risks\n- Propose solutions or alternatives for any identified challenges\n\nAfter your analysis, generate the technical specification using the following markdown structure:\n\n# {Project Name} Technical Specification\n\n## 1. System Overview\n- Core purpose and value proposition\n- Key workflows\n- System architecture\n\n## 2. Project Structure\n- Detailed breakdown of project structure &amp; organization\n\n## 3. Feature Specification\nFor each feature:\n### 3.1 Feature Name\n- User story and requirements\n- Detailed implementation steps\n- Error handling and edge cases\n\n## 4. Database Schema\n### 4.1 Tables\nFor each table:\n- Complete table schema (field names, types, constraints)\n- Relationships and indexes\n\n## 5. Server Actions\n### 5.1 Database Actions\nFor each action:\n- Detailed description of the action\n- Input parameters and return values\n- SQL queries or ORM operations\n\n### 5.2 Other Actions\n- External API integrations (endpoints, authentication, data formats)\n- File handling procedures\n- Data processing algorithms\n\n## 6. Design System\n### 6.1 Visual Style\n- Color palette (with hex codes)\n- Typography (font families, sizes, weights)\n- Component styling patterns\n- Spacing and layout principles\n\n### 6.2 Core Components\n- Layout structure (with examples)\n- Navigation patterns\n- Shared components (with props and usage examples)\n- Interactive states (hover, active, disabled)\n\n## 7. Component Architecture\n### 7.1 Server Components\n- Data fetching strategy\n- Suspense boundaries\n- Error handling\n- Props interface (with TypeScript types)\n\n### 7.2 Client Components\n- State management approach\n- Event handlers\n- UI interactions\n- Props interface (with TypeScript types)\n\n## 8. Authentication &amp; Authorization\n- Clerk implementation details\n- Protected routes configuration\n- Session management strategy\n\n## 9. Data Flow\n- Server/client data passing mechanisms\n- State management architecture\n\n## 10. Stripe Integration\n- Payment flow diagram\n- Webhook handling process\n- Product/Price configuration details\n\n## 11. PostHog Analytics\n- Analytics strategy\n- Event tracking implementation\n- Custom property definitions\n\n## 12. Testing\n- Unit tests with Jest (example test cases)\n- e2e tests with Playwright (key user flows to test)\n\nEnsure that your specification is extremely detailed, providing specific implementation guidance wherever possible. Include concrete examples for complex features and clearly define interfaces between components.\n\nBegin your response with your specification planning, then proceed to the full technical specification in the markdown output format.\n\n# Output\nPlease save the final technical specification as `design-spec.md` for use in planning the implementation process.\n</code></pre>"},{"location":"structured/design/design-spec-prompt/#output","title":"Output","text":"<ul> <li><code>design-spec.md</code> - A detailed technical specification document outlining all aspects of your application architecture</li> </ul>"},{"location":"structured/design/design-spec-prompt/#next-steps","title":"Next Steps","text":"<p>After completing your design specification, proceed to Implementation Plan using your <code>design-spec.md</code>, <code>tech-stack.md</code>, and <code>app-sitemap.md</code> as input</p>"},{"location":"structured/documentation/","title":"Documentation","text":""},{"location":"structured/documentation/#purpose","title":"Purpose","text":"<p>Create comprehensive documentation for your application.</p>"},{"location":"structured/documentation/#input","title":"Input","text":"<ul> <li>All previous documentation files</li> <li>Deployed application</li> </ul>"},{"location":"structured/documentation/#steps","title":"Steps","text":""},{"location":"structured/documentation/#1-compile-technical-documentation","title":"1. Compile technical documentation","text":""},{"location":"structured/documentation/#2-create-user-guides","title":"2. Create user guides","text":""},{"location":"structured/documentation/#3-document-api-endpoints","title":"3. Document API endpoints","text":""},{"location":"structured/documentation/#4-include-maintenance-procedures","title":"4. Include maintenance procedures","text":""},{"location":"structured/documentation/#sample-prompt","title":"Sample Prompt","text":"<pre><code>You are a senior technical documentation writer at a software company.\n\nCreate a comprehensive technical summary of this.\n\nMaintain technical accuracy while making it accessible to software engineers and product managers. Include specific examples mentioned in the text to illustrate key points.\n\nFormat the summary in markdown using:\n- Main title as H1 (#)\n- Major sections as H2 (##)\n- Subsections as H3 (###)\n- Bullet points for lists\n- Bold for key terms and concepts\n- Code blocks for any technical examples\n- Block quotes for direct quotations\n</code></pre>"},{"location":"structured/documentation/#output","title":"Output","text":"<ul> <li>Complete documentation set for users, developers, and maintainers</li> </ul>"},{"location":"structured/documentation/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Feedback &amp; Maintenance to collect user feedback and plan improvements</li> </ul>"},{"location":"structured/find/","title":"Find Something to Build","text":""},{"location":"structured/find/#purpose","title":"Purpose","text":"<p>Identify market opportunities for your SaaS.</p>"},{"location":"structured/find/#input","title":"Input","text":"<ul> <li>Market trends and research</li> <li>Industry insights</li> <li>Your domain knowledge</li> </ul>"},{"location":"structured/find/#steps","title":"Steps","text":""},{"location":"structured/find/#1-identify-gaps-in-the-market-where-a-new-saas-could-fit","title":"1. Identify gaps in the market where a new SaaS could fit","text":"<p>What is the gap? Why is this need unmet? Who has this need? Are there enough people to make it worthwhile?  What are the weaknesses of the competition? Can you find a whitespace with an underserved market? Can you build a compelling solution to meet this need in delightful way?</p> <p>One way to begin is to copy what's already been done and then improve it. </p> <p>Its helpful to solve your own problems. </p>"},{"location":"structured/find/#2-utilize-ai-tools","title":"2. Utilize AI tools:","text":"<ul> <li>Perplexity Deep Research - Advanced AI research assistant</li> <li>ChatGPT Deep Search - OpenAI's conversational AI</li> </ul>"},{"location":"structured/find/#3-ask-specific-questions","title":"3. Ask specific questions","text":"<p>like 'Find me 10 biggest gaps in the XYZ industry' or 'Validate this startup idea: [insert idea]. Include market size, top 3 competitors, current demand signals, and possible monetization.'</p>"},{"location":"structured/find/#4-use-ideapicker","title":"4. Use IdeaPicker","text":"<p>to find ideas by scanning Reddit for pain points</p>"},{"location":"structured/find/#5-check-vercel-domain-search","title":"5. Check Vercel Domain Search","text":"<p>for available domains matching your keywords</p>"},{"location":"structured/find/#output","title":"Output","text":"<ul> <li><code>market-opportunity.md</code> - Document outlining your SaaS idea, market opportunity, and initial concept</li> </ul>"},{"location":"structured/find/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Planning using your <code>market-opportunity.md</code> as input</li> </ul>"},{"location":"structured/implementation/","title":"Implementation","text":""},{"location":"structured/implementation/#purpose","title":"Purpose","text":"<p>Break down development into manageable tasks and implement the code following best practices.</p>"},{"location":"structured/implementation/#input","title":"Input","text":"<ul> <li><code>design-spec.md</code> from previous step</li> <li><code>prd.md</code> from previous steps</li> <li><code>app-sitemap.md</code> from previous steps</li> <li><code>tech-stack.md</code> from previous steps</li> </ul>"},{"location":"structured/implementation/#steps","title":"Steps","text":"<p>Go through the implementation planning, code generation, testing and debugging steps below. Use global rules to define your guidelines, DOD (definition of done).  Make a rule to constantly update the plan doc for tracking progress.</p>"},{"location":"structured/implementation/#1-implementation-planning","title":"1. Implementation Planning","text":"<ul> <li>Option 1: Use the Implementation Plan Guide</li> <li>Option 2: Use Taskmaster based on your <code>prd.md</code> file</li> <li>Option 3: Use Memory Bank based on your input documents</li> </ul>"},{"location":"structured/implementation/#2-code-generation","title":"2. Code Generation","text":"<ul> <li>Follow the Code Generation Guide</li> <li>Implement features iteratively</li> <li>Create modular, maintainable components</li> <li>Implement data flows according to architecture</li> <li>Build API integrations</li> <li>Apply proper error handling</li> </ul>"},{"location":"structured/implementation/#3-code-review-quality","title":"3. Code Review &amp; Quality","text":"<ul> <li>Use the Code Review Guide</li> <li>Conduct regular code reviews</li> <li>Ensure code maintainability</li> <li>Follow coding standards</li> </ul>"},{"location":"structured/implementation/#4-testing-debugging","title":"4. Testing &amp; Debugging","text":"<ul> <li>Follow the Testing and Debugging Guide</li> <li>Generate and run unit tests</li> <li>Perform integration testing</li> <li>Debug issues systematically</li> <li>Validate functionality</li> </ul>"},{"location":"structured/implementation/#output","title":"Output","text":"<ul> <li><code>implementation-steps.md</code> - Step-by-step implementation plan with prioritized tasks</li> <li>Functional codebase implementing your application</li> </ul>"},{"location":"structured/implementation/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Security to ensure your application is secure</li> </ul>"},{"location":"structured/implementation/code-review/","title":"Review Prompt \u2013 AI Code Review","text":""},{"location":"structured/implementation/code-review/#purpose","title":"Purpose","text":"<p>Analyze implemented code to improve code quality.</p>"},{"location":"structured/implementation/code-review/#input","title":"Input","text":"<ul> <li>Implemented codebase</li> <li><code>implementation-steps.md</code></li> </ul> <p>If you are using a LLM with a large context window (like 1 Million tokens in Gemini 2.5 Pro), you can paste the code.</p> <p>For code review, you can now use tools like CodeRabbit (free) inside your IDE. Just install the extension in Cursor, Windsurf, or VS Code, stage a commit, and get instant feedback.  Then you can paste the feedback into (Cursor) and ask it to resolve the issues.</p> <p>You can also use a Cursor custom mode like Refactor mode to improve code.</p> <p>Alternatively, you can use a prompt like below:</p>"},{"location":"structured/implementation/code-review/#prompt","title":"Prompt","text":"<pre><code>You are an expert code reviewer and optimizer responsible for analyzing the implemented code and creating a detailed optimization plan. Your task is to review the code that was implemented according to the original plan and generate a new implementation plan focused on improvements and optimizations.\n\nPlease review the following uploaded context and implementation: `implementation-steps.md`\n\nFirst, analyze the implemented code against the original implementation plan. Consider the following areas:\n\n## Steps\n\n### 1. Code Organization and Structure\n   - Review implementation of completed steps against the original plan\n   - Identify opportunities to improve folder/file organization\n   - Look for components that could be better composed or hierarchically organized\n   - Find opportunities for code modularization\n   - Consider separation of concerns\n\n### 2. Code Quality and Best Practices\n   - Look for TypeScript/React anti-patterns\n   - Identify areas needing improved type safety\n   - Find places needing better error handling\n   - Look for opportunities to improve code reuse\n   - Review naming conventions\n\n### 3. UI/UX Improvements\n   - Review UI components against requirements\n   - Look for accessibility issues\n   - Identify component composition improvements\n   - Review responsive design implementation\n   - Check error message handling\n\nWrap your analysis in &lt;analysis&gt; tags, then create a detailed refactoring plan using the following format:\n\n# Code Refactor Plan\n## [Category Name]\n- [ ] Step 1: [Brief title]\n  - **Task**: [Detailed explanation of what needs to be optimized/improved]\n  - **Files**: [List of files]\n    - `path/to/file1.ts`: [Description of changes]\n  - **Step Dependencies**: [Any steps that must be completed first]\n  - **User Instructions**: [Any manual steps required]\n[Additional steps...]\n\nFor each step in your plan:\n1. Focus on specific, concrete improvements\n2. Keep changes manageable (no more than 20 files per step, ideally less)\n3. Ensure steps build logically on each other\n4. Preserve starter template code and patterns\n5. Maintain existing functionality\n6. Follow project rules and technical specifications\n\nYour plan should be detailed enough for a code generation AI to implement each step in a single iteration. Order steps by priority and dependency requirements.\n\nRemember:\n- Focus on implemented code\n- Maintain consistency with existing patterns\n- Ensure each step is atomic and self-contained\n- Include clear success criteria for each step\n- Consider the impact of changes on the overall system\n\nBegin your response with your analysis of the current implementation, then proceed to create your detailed optimization plan.\n</code></pre>"},{"location":"structured/implementation/code-review/#output","title":"Output","text":"<ul> <li>Detailed code refactorization plan with specific improvement steps</li> <li>Implementation recommendations for each optimization</li> </ul>"},{"location":"structured/implementation/code-review/#benefits","title":"Benefits","text":"<ul> <li>Identifies code quality issues and anti-patterns</li> <li>Enhances code maintainability and readability</li> <li>Reduces technical debt</li> <li>Ensures best practices are applied consistently</li> </ul>"},{"location":"structured/implementation/code-review/#next-steps","title":"Next Steps","text":"<p>Implement the the code refactor plan.  After implementing the code refactor plan, proceed to Testing and Debugging.</p>"},{"location":"structured/implementation/codegen/","title":"Code Generation","text":""},{"location":"structured/implementation/codegen/#purpose","title":"Purpose","text":"<p>Use this prompt for AI to generate fully functional code from specifications and implementation plans. This bridges the gap between planning and execution.</p>"},{"location":"structured/implementation/codegen/#input","title":"Input","text":"<ul> <li><code>implementation-steps.md</code> - Your step-by-step implementation plan</li> <li>IDE-specific rules (e.g., Cursor Rules) for guidance</li> </ul>"},{"location":"structured/implementation/codegen/#steps","title":"Steps","text":""},{"location":"structured/implementation/codegen/#1-provide-your-implementation-stepsmd-file-in-the-implementation_plan-section","title":"1. Provide your <code>implementation-steps.md</code> file in the implementation_plan section","text":""},{"location":"structured/implementation/codegen/#2-include-your-ide-specific-rules","title":"2. Include your IDE-specific rules","text":"<p>Pick up a feature from the implementation plan</p>"},{"location":"structured/implementation/codegen/#2a-optional-ask-for-different-approaches-first-not-the-code","title":"2a. (optional) Ask for different approaches first, not the code","text":"<ul> <li>Pick the best approach and ask for a detailed action plan</li> <li>Review the plan carefully</li> <li>Pull up API docs if needed, review them, and attach them inside (Cursor)</li> </ul>"},{"location":"structured/implementation/codegen/#2b-optional-use-tdd","title":"2b. (optional) Use TDD","text":"<pre><code>Write test first, then write the code, and then iterate the code until all tests pass\n</code></pre>"},{"location":"structured/implementation/codegen/#3-run-the-prompt-to-generate-code-for-the-next-incomplete-step","title":"3. Run the prompt to generate code for the next incomplete step","text":""},{"location":"structured/implementation/codegen/#4-repeat-for-each-step-until-the-implementation-is-complete","title":"4. Repeat for each step until the implementation is complete","text":""},{"location":"structured/implementation/codegen/#prompt","title":"Prompt","text":"<pre><code>Your task is to systematically implement each step of the plan, one at a time.\n\n# Input\nFirst, carefully review the following uploaded implementation plan `implementation-steps.md`\n\nYour task is to:\n1. Identify the next incomplete step from the implementation plan (marked with `- [ ]`)\n2. Generate the necessary code for all files specified in that step\n3. Keep tests up to date after changing code.\n4. Add new tests to cover new features or edge cases\nAsk questions if anything is unclear.\n\nThe implementation plan is just a suggestion meant to provide a high-level overview of the objective. Use it to guide you, but you do not have to adhere to it strictly. If you update the implementation plan, include each modified step in full.  \n\nMake sure to follow the given IDE rules as you work along the lines of the plan.\n\nBegin by identifying the next incomplete step from the plan, then generate the required code. \n</code></pre>"},{"location":"structured/implementation/codegen/#output","title":"Output","text":"<ul> <li>Functional code files implementing each step from the plan</li> <li>Step-by-step implementation tracking</li> </ul>"},{"location":"structured/implementation/codegen/#benefits","title":"Benefits","text":"<ul> <li>Generates functional code based on your implementation plan</li> <li>Tracks progress through each step</li> <li>Provides explanations for implementation decisions</li> <li>Adapts the plan as needed during implementation</li> </ul>"},{"location":"structured/implementation/codegen/#next-steps","title":"Next Steps","text":"<p>After code generation, use Code Review to improve your code.</p>"},{"location":"structured/implementation/debugging/","title":"Testing and Debugging","text":""},{"location":"structured/implementation/debugging/#purpose","title":"Purpose","text":"<p>Systematically identify, isolate, and resolve issues in the codebase.</p>"},{"location":"structured/implementation/debugging/#input","title":"Input","text":"<ul> <li>Application codebase</li> <li>Error logs and reports</li> <li>User-reported problems</li> </ul>"},{"location":"structured/implementation/debugging/#steps","title":"Steps","text":""},{"location":"structured/implementation/debugging/#1-prepare-the-debugging-environment","title":"1. Prepare the debugging environment","text":""},{"location":"structured/implementation/debugging/#2-run-your-unit-and-integration-tests","title":"2. Run your unit and integration tests","text":""},{"location":"structured/implementation/debugging/#3-use-the-latest-best-coding-models-to-find-the-core-issues","title":"3. Use the latest, best coding models to find the core issues","text":""},{"location":"structured/implementation/debugging/#4-utilize-models-with-large-context-windows-eg-gemini-pro-25-to-scan-the-codebase","title":"4. Utilize models with large context windows (e.g., Gemini Pro 2.5) to scan the codebase","text":""},{"location":"structured/implementation/debugging/#5-attach-the-relevant-files-so-ai-can-focus-on-the-problem-area-effectively","title":"5. Attach the relevant files so AI can focus on the problem area effectively","text":""},{"location":"structured/implementation/debugging/#debugging-prompts","title":"Debugging Prompts","text":"<p>Here are some prompts that can be used to guide AI in debugging:</p> <p>1. Basic Debugging:</p> <pre><code>Find the core issue first and then plan step by step to fix the issue.\n</code></pre> <p>2. Debugging with Additional Context:</p> <pre><code>Follow the best practices of code. Search the web and find the fix for this issue.\n</code></pre> <p>3. Root Cause Analysis:</p> <pre><code>Deeply reflect upon all of this and think about why this isn't working. Theorize 4-6 different possible sources of the problem.\n\nThen, deeply reason about the root cause and distill your theories down to the 1-2 most probable sources of the problem before suggesting next steps.\n\nAdd additional logs to validate your assumptions and track the transformation of data structures throughout the application control flow before we move onto implementing the actual code fix.\n\nExplain the approach in detail first without writing any code.\n</code></pre> <p>4. Debugging UI Issues You can use a tool like Playwright as an installed tool or MCP tool for testing UI issues.  </p> <p>Also, the new Comet browser provides a feature for browser testing.  Here's a sample prompt for using the AI assistant in a sandboxed environment:</p> <pre><code>Take control of my browser, and act as a Senior Quality Engineer, and test my whole website. Explore and analyze everything you can find and give me back a complete report, including what looks good and what need to be improved. You are QA testing: `this website`\n</code></pre>"},{"location":"structured/implementation/debugging/#output","title":"Output","text":"<ul> <li>Resolved application issues</li> <li>Documentation of problems and solutions</li> <li>Improved error handling</li> <li>More robust codebase</li> </ul>"},{"location":"structured/implementation/debugging/#next-steps","title":"Next Steps","text":"<ul> <li>Iterate on implementation to build your product</li> </ul>"},{"location":"structured/implementation/implementation-plan/","title":"Implementation Plan","text":""},{"location":"structured/implementation/implementation-plan/#purpose","title":"Purpose","text":"<p>Use this prompt to break down a complex app project into manageable steps for execution. This creates a detailed roadmap that guides the development process.</p>"},{"location":"structured/implementation/implementation-plan/#input","title":"Input","text":"<ul> <li><code>design-spec.md</code> - Technical specifications document</li> <li><code>prd.md</code> - Product Requirements Doc</li> <li><code>app-sitemap.md</code> - Application structure and navigation</li> <li><code>tech-stack.md</code> - Tech stack</li> </ul>"},{"location":"structured/implementation/implementation-plan/#for-existing-codebase-or-starting-from-template","title":"For Existing codebase (or starting from template)","text":"<p>Take a screenshot of the folders (from the Explorer view in the Visual Studio editor) and include that in the prompt.</p> <p>If you use Claude-code, run the /init command.  You can also create a slash command <code>onboard.md</code> with content like the following: <pre><code>You are given the following context:\n$ARGUMENTS\n\nInstructions\nYour job is to \"onboard\" yourself to the current task.\nDo this by:\nUsing ultrathink\nExploring the codebase\nAsking me questions if needed\n\nThe goal is to get you fully prepared to start working on the task.\nTake as long as you need to get yourself ready. \n\nRecord everything in a .claude/tasks/[TASK_ID]/onboarding.md file. This file will be used to onboard you to the task in a new session if needed, so make sure it\u2019s comprehensive.\n</code></pre></p>"},{"location":"structured/implementation/implementation-plan/#useful-tools","title":"Useful Tools","text":"<p>If you have existing code on Github, these tools can be useful:</p>"},{"location":"structured/implementation/implementation-plan/#gitinjest","title":"Gitinjest:","text":"Turn any Git repository into a simple text digest of its codebase"},{"location":"structured/implementation/implementation-plan/#gitdiagram","title":"Gitdiagram:","text":"Turn any GitHub repository into an interactive diagram"},{"location":"structured/implementation/implementation-plan/#steps","title":"Steps","text":""},{"location":"structured/implementation/implementation-plan/#1-run-the-prompt-with-your-preferred-ai-thinking-model-to-generate-a-comprehensive-implementation-plan","title":"1. Run the prompt with your preferred AI thinking model to generate a comprehensive implementation plan","text":""},{"location":"structured/implementation/implementation-plan/#2-review-and-refine-the-output-as-needed","title":"2. Review and refine the output as needed","text":""},{"location":"structured/implementation/implementation-plan/#3-save-the-final-document-as-implementation-stepsmd","title":"3. Save the final document as <code>implementation-steps.md</code>","text":""},{"location":"structured/implementation/implementation-plan/#prompt","title":"Prompt","text":"<pre>\n<pre><code>You are an AI task planner responsible for breaking down a complex web application development project into manageable steps.\n\nYour goal is to create a detailed, step-by-step plan that will guide the code generation process for building a fully functional web application based on a provided technical specification.\n\n# Input\nFirst, carefully review the following uploaded inputs for Design doc `design-spec.md`, PRD `prd.md`, Sitemap `app-sitemap.md` and Tech Stack `tech-stack.md`\n\nAfter reviewing these inputs, your task is to create a comprehensive, detailed plan for implementing the web application.\n\nBefore creating the final plan, analyze the inputs and plan your approach. Wrap your thought process in &lt;brainstorming&gt; tags.\n\nBreak down the development process into small, manageable steps that can be executed sequentially by a code generation AI.\n\nEach step should focus on a specific aspect of the application and should be concrete enough for the AI to implement in a single iteration. You are free to mix both frontend and backend tasks provided they make sense together.\n\nWhen creating your plan, follow these guidelines:\n\n1. Start with the core project structure and essential configurations.\n2. Progress through database schema, server actions, and API routes.\n3. Move on to shared components and layouts.\n4. Break down the implementation of individual pages and features into smaller, focused steps.\n5. Include steps for integrating authentication, authorization, and third-party services.\n6. Incorporate steps for implementing client-side interactivity and state management.\n7. Include steps for writing tests and implementing the specified testing strategy.\n8. Ensure that each step builds upon the previous ones in a logical manner.\n\nPresent your plan using the following markdown-based format. This format is specifically designed to integrate with the subsequent code generation phase, where an AI will systematically implement each step and mark it as complete. Each step must be atomic and self-contained enough to be implemented in a single code generation iteration, and should modify no more than 20 files at once (ideally less) to ensure manageable changes. Make sure to include any instructions the user should follow for things you can't do like installing libraries, updating configurations on services, etc (Ex: Running a SQL script for storage bucket RLS policies in the Supabase editor).\n\n\n# Implementation Plan\n\n## [Section Name]\n- [ ] Step 1: [Brief title]\n  - **Task**: [Detailed explanation of what needs to be implemented]\n  - **Files**: [Maximum of 20 files, ideally less]\n    - `path/to/file1.ts`: [Description of changes]\n  - **Step Dependencies**: [Step Dependencies]\n  - **User Instructions**: [Instructions for User]\n\n[Additional steps...]\n\nAfter presenting your plan, provide a brief summary of the overall approach and any key considerations for the implementation process.\n\nRemember to:\n- Ensure that your plan covers all aspects of the technical specification.\n- Break down complex features into smaller, manageable tasks.\n- Consider the logical order of implementation, ensuring that dependencies are addressed in the correct sequence.\n- Include steps for error handling, data validation, and edge case management.\n\n# Output\nBegin your response with your brainstorming, then proceed to create your detailed implementation plan for the web application based on the provided specification. The final document will be saved as `implementation-steps.md` for use in the code generation process.\n</code></pre>\n</pre>"},{"location":"structured/implementation/implementation-plan/#output","title":"Output","text":"<ul> <li><code>implementation-steps.md</code> - A comprehensive step-by-step implementation plan with prioritized tasks</li> </ul>"},{"location":"structured/implementation/implementation-plan/#benefits","title":"Benefits","text":"<ul> <li>Creates a clear, step-by-step implementation plan</li> <li>Breaks complex features into manageable tasks</li> <li>Establishes logical development sequence</li> <li>Identifies dependencies between components</li> <li>Provides a trackable roadmap for development</li> <li>Integrates with code generation tools</li> </ul>"},{"location":"structured/implementation/implementation-plan/#next-steps","title":"Next Steps","text":"<p>After generating <code>implementation-steps.md</code>, proceed to Code Generation using this document as input for AI-assisted development.</p>"},{"location":"structured/maintenance/","title":"Feedback &amp; Maintenance","text":""},{"location":"structured/maintenance/#purpose","title":"Purpose","text":"<p>Collect user feedback and implement iterative improvements.</p>"},{"location":"structured/maintenance/#input","title":"Input","text":"<ul> <li>Deployed application</li> <li>User feedback</li> </ul>"},{"location":"structured/maintenance/#steps","title":"Steps","text":""},{"location":"structured/maintenance/#1-paste-all-feedback-into-cursor","title":"1. Paste all feedback into (Cursor)","text":""},{"location":"structured/maintenance/#2-ask-it-to-create-maintenance-logmd-with-root-causes-fixes","title":"2. Ask it to create <code>maintenance-log.md</code> with root causes + fixes","text":""},{"location":"structured/maintenance/#3-break-it-down-one-item-at-a-time","title":"3. Break it down, one item at a time","text":""},{"location":"structured/maintenance/#4-ask-cursor-to-fix-each-one-and-check-it-off","title":"4. Ask (Cursor) to fix each one and check it off","text":""},{"location":"structured/maintenance/#5-review-your-final-commits-with-coderabbit","title":"5. Review your final commits (with CodeRabbit)","text":""},{"location":"structured/maintenance/#output","title":"Output","text":"<ul> <li><code>maintenance-log.md</code> - Ongoing maintenance documentation</li> <li>Updated roadmap for future development</li> </ul>"},{"location":"structured/maintenance/#next-steps","title":"Next Steps","text":"<ul> <li>Return to Planning for the next development cycle using new requirements and feedback</li> </ul>"},{"location":"structured/planning/","title":"Planning Your SaaS Application","text":""},{"location":"structured/planning/#purpose","title":"Purpose","text":"<p>Prioritize features and define the scope of your SaaS app.</p>"},{"location":"structured/planning/#input","title":"Input","text":"<ul> <li><code>market-opportunity.md</code> from previous step</li> </ul>"},{"location":"structured/planning/#steps","title":"Steps","text":""},{"location":"structured/planning/#1-initial-planning","title":"1. Initial Planning","text":"<ul> <li>Use the Ideas to Development Plans prompt</li> <li>Brainstorm using AI tools</li> <li>Define initial scope</li> </ul>"},{"location":"structured/planning/#2-feature-planning","title":"2. Feature Planning","text":"<ul> <li>Follow the Feature Prioritization Guide</li> <li>Use the MoSCoW method:<ul> <li>Must have</li> <li>Should have</li> <li>Could have</li> <li>Won't have</li> </ul> </li> </ul>"},{"location":"structured/planning/#3-mvp-validation","title":"3. MVP Validation","text":"<ul> <li>Use the MVP Validation Guide</li> <li>Landing page testing</li> <li>Market feedback collection</li> </ul>"},{"location":"structured/planning/#output","title":"Output","text":"<ul> <li><code>feature-priorities.md</code> - Prioritized feature list with implementation recommendations</li> </ul>"},{"location":"structured/planning/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Requirements using your <code>feature-priorities.md</code> as input</li> </ul>"},{"location":"structured/planning/feature-prioritization/","title":"Feature Prioritization Prompt","text":"<p>This prompt helps you prioritize features effectively for your SaaS application using a systematic approach combining the MoSCoW method with impact-effort analysis.</p> <p>You can start by building a super simple version, just one core feature</p>"},{"location":"structured/planning/feature-prioritization/#purpose","title":"Purpose","text":"<p>Systematically analyze and prioritize your application features to create a focused development roadmap.</p>"},{"location":"structured/planning/feature-prioritization/#input","title":"Input","text":"<ul> <li><code>features.md</code> - Your initial features document</li> </ul>"},{"location":"structured/planning/feature-prioritization/#steps","title":"Steps","text":""},{"location":"structured/planning/feature-prioritization/#1-provide-your-featuresmd-file-or-list-all-potential-features-for-your-application","title":"1. Provide your <code>features.md</code> file or list all potential features for your application","text":""},{"location":"structured/planning/feature-prioritization/#2-include-a-brief-description-for-complex-features","title":"2. Include a brief description for complex features","text":""},{"location":"structured/planning/feature-prioritization/#3-note-any-known-dependencies-or-technical-requirements","title":"3. Note any known dependencies or technical requirements","text":""},{"location":"structured/planning/feature-prioritization/#4-run-the-prompt-and-analyze-the-results","title":"4. Run the prompt and analyze the results","text":""},{"location":"structured/planning/feature-prioritization/#5-save-the-output-as-feature-prioritiesmd-for-the-next-step","title":"5. Save the output as <code>feature-priorities.md</code> for the next step","text":""},{"location":"structured/planning/feature-prioritization/#the-prompt","title":"The Prompt","text":"<pre><code>Help prioritize features for my SaaS application. \n\n# Input\nPlease review the attached `features.md` and `market-opportunity.md` files.\n\nPlease help me analyze and prioritize these features using the following framework:\n\n1. MoSCoW Analysis\n    Categorize each feature as:\n    * Must have (critical for MVP)\n    * Should have (important but not critical)\n    * Could have (desired but not necessary)\n    * Won't have (out of scope for now)\n\n2. Impact-Effort Matrix\n    For each Must and Should have feature, analyze:\n    * User Impact (High/Medium/Low)\n    * Development Effort (High/Medium/Low)\n    * Technical Risk (High/Medium/Low)\n    * Dependencies\n\n3. Consider Dependencies\n    * Note any technical or functional dependencies\n    * Identify integration requirements\n    * Map feature relationships\n\n4. Implementation Order\n    Based on the above analysis:\n    * Suggest an optimal implementation sequence\n    * Identify quick wins (high impact, low effort)\n    * Flag potential bottlenecks\n    * Group features into logical development phases\n\nPlease provide reasoning for each categorization and any additional insights about feature dependencies or technical considerations.\n\nMoSCoW Categories\n\n1. **Must Have**\n    * Core features essential for the MVP\n    * Features without which the product cannot function\n    * Basic security and data protection features\n\n2. **Should Have**\n    * Important features that add significant value\n    * Features that can be temporarily worked around\n    * Improvements to core functionality\n\n3. **Could Have**\n    * Nice-to-have features\n    * Features that would improve user experience\n    * Additional customization options\n\n4. **Won't Have**\n    * Features outside the current scope\n    * Future considerations\n    * Features with low value-to-effort ratio\n\nImpact-Effort Quadrants\n\n```mermaid\nquadrantChart\n    title Impact vs Effort\n    x-axis Low Effort --&gt; High Effort\n    y-axis Low Impact --&gt; High Impact\n    quadrant-1 Quick Wins\n    quadrant-2 Major Projects\n    quadrant-3 Fill Ins\n    quadrant-4 Hard Slogs\n</code></pre>"},{"location":"structured/planning/feature-prioritization/#output","title":"Output","text":"<p>The final prioritized feature list will be saved as <code>feature-priorities.md</code> for use in creating the PRD.</p>"},{"location":"structured/planning/feature-prioritization/#refinement-process","title":"Refinement Process","text":"<p>After initial prioritization:</p> <ol> <li> <p>Validate with Stakeholders</p> <ul> <li>Prioritize based on user value and business impact</li> <li>Consider user feedback and market demands</li> <li>Focus on core user needs</li> </ul> <pre><code>Based on the prioritization, here are the key questions for stakeholders:\n[List specific questions about priority decisions]\n</code></pre> </li> <li> <p>Technical Feasibility Check</p> <ul> <li>Consider your team's capabilities and resources</li> <li>Account for learning curves and training</li> <li>Plan for contingencies </li> </ul> <pre><code>For the high-priority features, please analyze technical feasibility and identify potential challenges:\n[List high-priority features]\n</code></pre> </li> <li> <p>Think Long-term</p> <ul> <li>Consider future scalability and maintenance</li> <li>Plan for platform growth</li> <li>Account for technical debt</li> </ul> <pre><code>Given our prioritized feature list, please suggest resource allocation and timeline estimates for:\n[List prioritized features]\n</code></pre> </li> </ol>"},{"location":"structured/planning/feature-prioritization/#next-steps","title":"Next Steps","text":"<p>After generating <code>feature-priorities.md</code>, proceed to MVP Validation.</p>"},{"location":"structured/planning/ideas-to-development-plans/","title":"Ideas to Development Plan","text":""},{"location":"structured/planning/ideas-to-development-plans/#purpose","title":"Purpose","text":"<p>Collaborate with AI to define your project scope, target audience, and features before development starts. This is the first step in the structured development process.</p>"},{"location":"structured/planning/ideas-to-development-plans/#input","title":"Input","text":"<ul> <li>Your initial app concept/idea</li> <li>Market insights (optional)</li> <li>Domain knowledge (optional)</li> </ul>"},{"location":"structured/planning/ideas-to-development-plans/#steps","title":"Steps","text":""},{"location":"structured/planning/ideas-to-development-plans/#1-replace-idea-with-your-initial-app-concept","title":"1. Replace <code>{{IDEA}}</code> with your initial app concept","text":""},{"location":"structured/planning/ideas-to-development-plans/#2-engage-in-conversation-with-the-ai-about-your-idea","title":"2. Engage in conversation with the AI about your idea","text":""},{"location":"structured/planning/ideas-to-development-plans/#3-review-and-refine-the-specification-after-each-exchange","title":"3. Review and refine the specification after each exchange","text":""},{"location":"structured/planning/ideas-to-development-plans/#4-once-complete-save-the-final-specification-as-market-opportunitymd-for-the-next-step","title":"4. Once complete, save the final specification as <code>market-opportunity.md</code> for the next step","text":""},{"location":"structured/planning/ideas-to-development-plans/#prompt","title":"Prompt","text":"<pre>\n<pre><code>I have a web app idea I'd like to develop. Here's my initial concept: `{{IDEA}}`. Help me refine it, validate the market, uncover monetization options, and outline a roadmap from MVP to first $10k in revenue. I want to collaborate with you to turn this into a detailed project request. Let's iterate together until we have a complete request that I find to be satisfactory. After each of our exchanges, please return the current state of the request in this format:\n\n# Project Name\n## Market Opportunity\n[Description of market need and opportunity]\n## Project Description\n[Description]\n## Target Audience\n[Target users]\n## Desired Features\n### [Feature Category]\n- [ ] [Requirement]\n- [ ] [Sub-requirement]\n## Design Requests\n- [ ] [Design requirement]\n- [ ] [Design detail]\n## Other Notes\n- [ ] [Additional considerations]\n\nPlease:\n1. Ask me questions about any areas that need more detail.\n2. Suggest features or considerations I might have missed.\n3. Help me organize requirements logically.\n4. Show me the current state of the spec after each exchange.\n5. Flag any potential technical challenges or important decisions.\n\nWe'll continue iterating and refining the request until I indicate it's complete and ready.\n\n## Final Output\nWhen we complete our discussion, save the final document as `features.md` to use as input for feature prioritization.\n</code></pre>\n</pre>"},{"location":"structured/planning/ideas-to-development-plans/#deep-research","title":"Deep Research","text":"<ul> <li>Use a deep research tool from your favorite LLM to explore your idea in depth.  Research can include a minimum number of websites, research papers, youtube video transcripts... </li> </ul>"},{"location":"structured/planning/ideas-to-development-plans/#output","title":"Output","text":"<ul> <li><code>features.md</code> - A comprehensive document outlining your project idea, target audience, market opportunity, and initial feature set</li> </ul>"},{"location":"structured/planning/ideas-to-development-plans/#benefits","title":"Benefits","text":"<ul> <li>Clarifies your vision before development begins.</li> <li>Identifies potential challenges early.</li> <li>Creates a structured document for sharing with stakeholders.</li> <li>Ensures all critical requirements are captured.</li> <li>Simplifies the development process with clear specifications.</li> </ul>"},{"location":"structured/planning/ideas-to-development-plans/#next-steps","title":"Next Steps","text":"<p>After generating <code>features.md</code>, proceed to Feature Prioritization using this document as input to prioritize your features.</p>"},{"location":"structured/planning/mvp-validation/","title":"MVP Validation Guide","text":""},{"location":"structured/planning/mvp-validation/#purpose","title":"Purpose","text":"<p>Validate your MVP concept with real-world feedback before investing significant development resources.</p>"},{"location":"structured/planning/mvp-validation/#input","title":"Input","text":"<ul> <li><code>market-opportunity.md</code> - Your market opportunity document</li> <li><code>feature-priorities.md</code> - Your prioritized feature list</li> </ul>"},{"location":"structured/planning/mvp-validation/#steps","title":"Steps","text":""},{"location":"structured/planning/mvp-validation/#1-understand-common-validation-pitfalls","title":"1. Understand Common Validation Pitfalls","text":"<p>Most founders skip validation, assuming that if they need a solution, others will too. This leads to a common misconception:</p> <ul> <li>\"It's a great idea, so people will pay\"</li> <li>\"The market is big enough for my product\"</li> </ul> <p>Reality: Most ideas fail due to a lack of actual demand.</p>"},{"location":"structured/planning/mvp-validation/#2-reframe-your-approach","title":"2. Reframe Your Approach","text":"<p>Instead of asking, \"Is my idea good?\", reframe the question to:</p> <ul> <li>\"Who has this problem and how are they solving it today?\"</li> </ul> <p>If no one is actively seeking a solution, the demand may be insufficient.</p>"},{"location":"structured/planning/mvp-validation/#3-research-existing-demand","title":"3. Research Existing Demand","text":"<p>To validate demand, consider these approaches:</p> <ul> <li>Search Volume Check: Use tools like Google Keyword Planner to see how many people are searching for the problem</li> <li>Community Research: Explore platforms like Reddit, X, and Discord forums to gauge discussions around the problem</li> </ul>"},{"location":"structured/planning/mvp-validation/#4-create-a-validation-landing-page","title":"4. Create a Validation Landing Page","text":"<p>Before coding, create a basic landing page that includes:</p> <ul> <li>A clear problem statement</li> <li>An explanation of how your product solves this problem</li> <li>An email signup form to measure interest</li> </ul> <p>Drive traffic through:</p> <ul> <li>Social media posts and polls</li> <li>Community discussions</li> </ul>"},{"location":"structured/planning/mvp-validation/#5-secure-pre-commitments","title":"5. Secure Pre-Commitments","text":"<p>The best validation occurs when potential users are willing to pay before the product is built. Consider:</p> <ul> <li>Pre-selling to your network</li> <li>Offering early access discounts</li> <li>Running a paid waitlist with a small deposit</li> </ul> <p>If people show hesitation to pay, it may signal a lack of interest.</p>"},{"location":"structured/planning/mvp-validation/#6-conduct-user-interviews","title":"6. Conduct User Interviews","text":"<p>Engage in direct conversations with potential users. Ask questions like:</p> <ul> <li>What is your biggest challenge related to this problem?</li> <li>Have you tried any solutions before?</li> <li>Would you pay for a tool that solves this?</li> </ul> <p>If they express interest, follow up with questions regarding pricing and usage patterns.</p>"},{"location":"structured/planning/mvp-validation/#7-define-your-validated-mvp-scope","title":"7. Define Your Validated MVP Scope","text":"<p>If your validation efforts find positive signals, keep your MVP focused:</p> <ul> <li>Address one core pain point</li> <li>Cater to one specific user type</li> </ul> <p>Construct only what is necessary for initial testing.</p>"},{"location":"structured/planning/mvp-validation/#output","title":"Output","text":"<ul> <li>Validated MVP concept with evidence of market demand</li> <li>List of potential early users or customers</li> <li>Refined understanding of user needs and priorities</li> </ul>"},{"location":"structured/planning/mvp-validation/#validation-checklist","title":"Validation Checklist","text":"<p>Ensure your product validation includes:</p> <ul> <li> Proof of demand through research</li> <li> Landing page with collected signups</li> <li> Pre-commitments from users or early orders</li> <li> In-depth conversations with potential users</li> <li> Clear understanding of user willingness to pay</li> </ul>"},{"location":"structured/planning/mvp-validation/#next-steps","title":"Next Steps","text":"<p>After validating your MVP concept:</p> <ol> <li>Proceed to Requirements to formalize your validated concept</li> </ol>"},{"location":"structured/requirements/","title":"Requirements","text":""},{"location":"structured/requirements/#purpose","title":"Purpose","text":"<p>Establish clear project requirements and specifications.</p>"},{"location":"structured/requirements/#input","title":"Input","text":"<ul> <li><code>market-opportunity.md</code> from previous step</li> <li><code>feature-priorities.md</code> from previous step</li> </ul>"},{"location":"structured/requirements/#what-to-define","title":"What to define","text":"<ol> <li> <p>Introduction: Explain the problem you\u2019re solving and the vision for the product. This sets the context for everyone involved.</p> </li> <li> <p>Objectives &amp; Goals: Highlight the main outcomes the product should achieve. What\u2019s the core purpose?</p> </li> <li> <p>Target Users &amp; Roles: Identify who will use the product (e.g., clients, admins) and what actions they need to perform.</p> </li> <li> <p>Core Features for MVP: List the must-have features to deliver value quickly and validate the product.</p> </li> <li> <p>Future Scope: Outline features that can be added later. This helps clients think beyond the MVP without overloading the first phase.</p> </li> <li> <p>User Journey: Map out how users interact with the product step by step. Cover all roles for complete clarity.</p> </li> <li> <p>Tech Stack: Define the tools, frameworks, and APIs you\u2019ll use to build the product.</p> </li> </ol>"},{"location":"structured/requirements/#steps","title":"Steps","text":"<ul> <li>Option 1: Launch ChatPRD Continue iterating and refining until all requirements are clearly spelled out.</li> <li>Option 2: Use a custom mode in Cursor like PRD mode </li> <li>Option 3: Use Codeguide to guide you to create detailed documentation for your project. </li> <li>Option 4: Use 10xcoder.dev to generate specs, tasks, and rules as well as a starter project to use with Cursor (or your favorite IDE).</li> </ul>"},{"location":"structured/requirements/#output","title":"Output","text":"<ul> <li><code>prd.md</code> - Comprehensive Product Requirements Document containing:<ul> <li>App overview</li> <li>User flows</li> <li>Tech stack &amp; APIs</li> <li>Core features</li> <li>In-scope vs. out-of-scope items</li> </ul> </li> </ul>"},{"location":"structured/requirements/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Tech Stack and App Flow using your <code>prd.md</code> as input</li> </ul>"},{"location":"structured/requirements/prd/","title":"PRD Creation Prompt","text":""},{"location":"structured/requirements/prd/#purpose","title":"Purpose","text":"<p>Create a a detailed Product Requirements Document (PRD) that clearly defines your product's features, requirements, and specifications.</p>"},{"location":"structured/requirements/prd/#input","title":"Input","text":"<ul> <li><code>market-opportunity.md</code> from previous step</li> <li><code>feature-priorities.md</code> - Your prioritized feature list</li> <li>Product name and basic description</li> <li>Target audience information</li> </ul>"},{"location":"structured/requirements/prd/#the-prompt","title":"The Prompt","text":"<pre><code>Help create a comprehensive Product Requirements Document (PRD) for my SaaS application.\n\n# Input\nPlease review my `feature-priorities.md` file or the following information:\n\nProduct Name: `{{PRODUCT NAME}}`\nProduct Description: [2-3 SENTENCE DESCRIPTION]\nTarget Audience: [PRIMARY USER TYPES]\nPrioritized Features: [FEATURE LIST FROM `feature-priorities.md`]\n\nPlease create a detailed PRD following this structure:\n\n1. Executive Summary\n   - Product Vision\n   - Business Objectives\n   - Success Metrics\n\n2. Product Overview\n   - Problem Statement\n   - Solution Overview\n   - Target Users\n   - User Personas\n   - User Journey Maps\n\n3. Feature Requirements\n   - Core Features\n   - Feature Specifications\n   - User Stories\n   - Acceptance Criteria\n   - Technical Requirements\n\n4. User Interface\n   - Information Architecture\n   - User Flow Diagrams\n   - Key Screens\n   - Design Requirements\n   - Accessibility Requirements\n\n5. Technical Architecture\n   - System Components\n   - Data Models\n   - API Requirements\n   - Integration Points\n   - Security Requirements\n\n6. Non-Functional Requirements\n   - Performance Requirements\n   - Scalability Requirements\n   - Security Requirements\n   - Compliance Requirements\n   - Browser/Device Support\n\n7. Implementation Considerations\n   - Dependencies\n   - Constraints\n   - Risks and Mitigations\n   - Timeline Estimates\n   - Resource Requirements\n\nReflection:\n- Justify the inclusion of each requirement.\n- Consider potential challenges and propose mitigation strategies.\n- Reflect on how each element contributes to the overall project goals.\n\n# Output\nPlease provide detailed specifications for each section while maintaining clarity and actionability. The final document will be saved as `prd.md` for reference during development.\n</code></pre>"},{"location":"structured/requirements/prd/#how-to-use","title":"How to Use","text":"<ol> <li>Provide your <code>feature-priorities.md</code> file or the prioritized feature information</li> <li>Replace the placeholder information with your product details</li> <li>Be specific about your target audience and use cases</li> <li>Include any specific technical requirements or constraints</li> <li>Save the output as <code>prd.md</code> for the next step</li> </ol>"},{"location":"structured/requirements/prd/#example","title":"Example","text":"<pre><code>Help create a comprehensive Product Requirements Document (PRD) for my SaaS application.\n\n# Input\nPlease review my `feature-priorities.md` file or the following information:\n\nProduct Name: TaskMaster Pro\nProduct Description: A project management tool for remote development teams that integrates with popular version control systems and communication tools. It focuses on automated task tracking and progress visualization.\nTarget Audience: Software development teams, project managers, and technical team leads\nPrioritized Features:\n- Must Have: User authentication, Project dashboard, Task management\n- Should Have: File upload, Team collaboration, Notifications\n- Could Have: API integration, Custom reporting\n- Won't Have: Video conferencing, Mobile apps (v1)\n\n[Rest of the prompt remains the same...]\n</code></pre>"},{"location":"structured/requirements/prd/#output","title":"Output","text":"<ul> <li><code>prd.md</code> - A comprehensive Product Requirements Document that defines all aspects of your product</li> </ul>"},{"location":"structured/requirements/prd/#prd-best-practices","title":"PRD Best Practices","text":""},{"location":"structured/requirements/prd/#1-clarity-and-precision","title":"1. Clarity and Precision","text":"<ul> <li>Use clear, unambiguous language</li> <li>Define technical terms</li> <li>Provide specific examples</li> <li>Include measurable criteria</li> </ul>"},{"location":"structured/requirements/prd/#2-completeness","title":"2. Completeness","text":"<ul> <li>Cover all essential aspects</li> <li>Address edge cases</li> <li>Include error scenarios</li> <li>Define success criteria</li> </ul>"},{"location":"structured/requirements/prd/#3-traceability","title":"3. Traceability","text":"<ul> <li>Link requirements to business goals</li> <li>Connect features to user needs</li> <li>Reference related documents</li> <li>Track requirement changes</li> </ul>"},{"location":"structured/requirements/prd/#4-feasibility","title":"4. Feasibility","text":"<ul> <li>Validate technical feasibility</li> <li>Consider resource constraints</li> <li>Account for timeline limitations</li> <li>Address potential risks</li> </ul>"},{"location":"structured/requirements/prd/#follow-up-prompts","title":"Follow-up Prompts","text":""},{"location":"structured/requirements/prd/#1-feature-deep-dive","title":"1. Feature Deep Dive","text":"<pre><code>Please provide detailed specifications for the following feature:\n[FEATURE NAME]\nInclude:\n- User stories\n- Technical requirements\n- API specifications\n- Data models\n- UI/UX requirements\n</code></pre>"},{"location":"structured/requirements/prd/#2-user-flow-analysis","title":"2. User Flow Analysis","text":"<pre><code>Please create detailed user flow diagrams for:\n[USER SCENARIO]\nInclude:\n- Step-by-step actions\n- System responses\n- Error scenarios\n- Success criteria\n</code></pre>"},{"location":"structured/requirements/prd/#validation-checklist","title":"Validation Checklist","text":"<p>Before finalizing your PRD, ensure:</p> <ul> <li> All sections are complete and detailed</li> <li> Requirements are clear and measurable</li> <li> Technical specifications are feasible</li> <li> User scenarios are comprehensive</li> <li> Success criteria are defined</li> <li> Risks and mitigations are addressed</li> <li> Stakeholder feedback is incorporated</li> </ul>"},{"location":"structured/requirements/prd/#tips-for-better-results","title":"Tips for Better Results","text":"<ol> <li>Start Broad: Begin with high-level requirements before diving into details</li> <li>User-Centric: Always tie requirements back to user needs</li> <li>Be Specific: Avoid vague or ambiguous requirements</li> <li>Stay Realistic: Ensure requirements are achievable within constraints</li> <li>Include Context: Provide background information where needed</li> <li>Consider Scale: Think about how requirements will scale</li> <li>Document Assumptions: Clearly state any assumptions made </li> </ol>"},{"location":"structured/requirements/prd/#next-steps","title":"Next Steps","text":"<p>After completing your PRD: 1. Proceed to Tech Stack and App Flow using your <code>prd.md</code> as input</p>"},{"location":"structured/security/","title":"Security","text":""},{"location":"structured/security/#purpose","title":"Purpose","text":"<p>Identify and mitigate potential security vulnerabilities.</p>"},{"location":"structured/security/#input","title":"Input","text":"<ul> <li>Codebase</li> </ul>"},{"location":"structured/security/#steps","title":"Steps","text":""},{"location":"structured/security/#1-use-the-security-scan-prompt","title":"1. Use the Security Scan Prompt","text":""},{"location":"structured/security/#2-implement-recommended-security-improvements","title":"2. Implement recommended security improvements","text":""},{"location":"structured/security/#3-verify-fixes-with-security-testing","title":"3. Verify fixes with security testing","text":""},{"location":"structured/security/#output","title":"Output","text":"<ul> <li><code>security-audit.md</code> - Security assessment with identified vulnerabilities and fixes</li> <li>Secure codebase with implemented fixes</li> </ul>"},{"location":"structured/security/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to Deployment with your secure codebase and <code>security-audit.md</code></li> </ul>"},{"location":"structured/security/security-scan/","title":"Security Scan Prompt","text":"<p>This guide helps you perform a thorough security analysis of your application to identify and fix potential vulnerabilities.</p>"},{"location":"structured/security/security-scan/#purpose","title":"Purpose","text":"<p>Identify and remediate security vulnerabilities, ensure compliance with best practices, and establish a robust security posture for your application.</p>"},{"location":"structured/security/security-scan/#input","title":"Input","text":"<ul> <li>Functional codebase</li> <li>Tech stack details</li> <li>Authentication method information</li> <li>Data sensitivity level</li> </ul>"},{"location":"structured/security/security-scan/#security-prompt","title":"Security Prompt","text":"<pre><code>Act as a security expert and do a full audit of the codebase. Your goal is to flag high-impact vulnerabilities and help fix them with minimal changes.\n\nFollow this 3-phase approach:\n\n**Phase 1: Codebase Scan**\nGo through the entire repo. Focus especially on:\n\u2022 Auth flows\n\u2022 API endpoints\n\u2022 DB queries\n\u2022 Env variables and secrets\n\u2022 User input handling\n\nFlag anything risky with:\n\u2022 File name and line numbers\n\u2022 Clear explanations of what's wrong\n\u2022 Priority level (Critical, High, Medium, Low)\n\n**Phase 2: Risk Analysis + Fix Plan**\n\nFor every issue:\n\u2022 Explain what the vulnerability is\n\u2022 Describe how it can be exploited\n\u2022 Recommend the smallest fix needed\n\u2022 Explain how the fix improves security\n\nAvoid overengineering. Focus on practical fixes that make the code safer without breaking anything.\n\n**Phase 3: Secure Fixes**\n\u2022 Make minimal changes\n\u2022 Show a before/after diff\n\u2022 Verify the fix works and doesn't introduce anything new\n\u2022 Flag anything that needs manual testing\n\n**Focus Areas to Prioritize:**\n\u2022 Leaked API keys or credentials\n\u2022 Missing rate limits\n\u2022 Broken or bypassable auth\n\u2022 Insecure direct object references (IDOR)\n\u2022 Missing server-side validation\n\u2022 Poor error handling that leaks info\n\u2022 Sensitive data being exposed unnecessarily\n\nReturn the final report as file `security-audit.md` I can share with my team.\n\nBe precise. Be realistic. Prioritize impact.\n</code></pre>"},{"location":"structured/security/security-scan/#output","title":"Output","text":"<ul> <li><code>security-audit.md</code> - A comprehensive security assessment document with identified vulnerabilities and remediation steps</li> </ul>"},{"location":"structured/security/security-scan/#next-steps","title":"Next Steps","text":"<p>After generating <code>security-audit.md</code>, use it to implement security fixes and then proceed to Deployment.  </p>"},{"location":"structured/tech-stack/","title":"Tech Stack Selection","text":""},{"location":"structured/tech-stack/#purpose","title":"Purpose","text":"<p>Define the technologies that will be used to build your application.</p>"},{"location":"structured/tech-stack/#input","title":"Input","text":"<ul> <li><code>prd.md</code> from previous step</li> </ul>"},{"location":"structured/tech-stack/#steps","title":"Steps","text":""},{"location":"structured/tech-stack/#1-research-appropriate-technologies-for-your-specific-requirements","title":"1. Research appropriate technologies for your specific requirements","text":""},{"location":"structured/tech-stack/#2-consider-scalability-learning-curve-and-community-support","title":"2. Consider scalability, learning curve, and community support","text":""},{"location":"structured/tech-stack/#3-review-the-tech-stack-guide","title":"3. Review the Tech Stack Guide","text":""},{"location":"structured/tech-stack/#4-list-preferred-libraries-and-tools","title":"4. List preferred libraries and tools","text":""},{"location":"structured/tech-stack/#5-consider-using-a-starter-kit","title":"5. Consider using a starter kit","text":"<ul> <li>Include rules and IDE configuration files (e.g. Cursor rules, settings) in starter project configuration</li> <li>awesome-opensource-boilerplates free starter kits</li> <li>boilerplatehub paid starter kits</li> </ul>"},{"location":"structured/tech-stack/#6-setup-testing-frameworks-like-jest-pytest","title":"6. Setup testing frameworks (like Jest, PyTest)","text":""},{"location":"structured/tech-stack/#output","title":"Output","text":"<ul> <li><code>tech-stack.md</code> - Document specifying your technology choices including:<ul> <li>Frontend framework</li> <li>Backend services</li> <li>Database solutions</li> <li>Authentication system</li> <li>Development tools</li> <li>Third-party integrations</li> <li>Testing frameworks</li> </ul> </li> </ul>"},{"location":"structured/tech-stack/#next-steps","title":"Next Steps","text":"<ul> <li>Proceed to App Flow using your <code>prd.md</code> and <code>tech-stack.md</code> as input</li> </ul>"},{"location":"structured/tech-stack/tech-stack/","title":"Tech Stack","text":""},{"location":"structured/tech-stack/tech-stack/#sample-tech-stack","title":"Sample Tech Stack","text":""},{"location":"structured/tech-stack/tech-stack/#introduction","title":"Introduction","text":"<p>This documentation outlines the technology stack used in a cutting-edge web application starter template powered by Next.js. The stack is designed for modern development, integrating robust frameworks, authentication, databases, payment solutions, and responsive design practices.</p>"},{"location":"structured/tech-stack/tech-stack/#overview-of-tech-stack","title":"Overview of Tech Stack","text":"Category Technology Framework Next.js (App Router) Authentication Clerk Database Supabase Styling Tailwind CSS Payments Stripe UI Components Shadcn/UI Deployment Vercel Email Resend"},{"location":"structured/tech-stack/tech-stack/#core-technologies","title":"Core Technologies","text":""},{"location":"structured/tech-stack/tech-stack/#1-nextjs-app-router","title":"1. Next.js (App Router)","text":"<p>Next.js provides server-side rendering, API routes, and optimized performance. The App Router simplifies navigation and structure.</p> <ul> <li>Server-side rendering</li> <li>API routes</li> <li>Optimized performance</li> </ul>"},{"location":"structured/tech-stack/tech-stack/#2-authentication-clerk","title":"2. Authentication (Clerk)","text":"<p>Clerk handles secure user management with features that include:</p> <ul> <li>Secure user authentication</li> <li>Social login integrations</li> <li>Role-based access control</li> </ul>"},{"location":"structured/tech-stack/tech-stack/#3-database-supabase","title":"3. Database (Supabase)","text":"<p>Supabase offers powerful SQL capabilities coupled with real-time features.</p> <ul> <li>Real-time data synchronization</li> <li>SQL-based queries</li> <li>Built-in row-level security</li> </ul>"},{"location":"structured/tech-stack/tech-stack/#4-payments-stripe","title":"4. Payments (Stripe)","text":"<p>Stripe integration facilitates seamless and secure transaction processing:</p> <ul> <li>Secure payment handling</li> <li>Subscription management</li> <li>Usage-based billing</li> </ul>"},{"location":"structured/tech-stack/tech-stack/#5-ui-styling-tailwind-css","title":"5. UI &amp; Styling (Tailwind CSS)","text":"<p>Tailwind CSS provides a flexible, responsive styling solution:</p> <ul> <li>Responsive and adaptive layouts</li> <li>Customizable component library</li> <li>Dark/light mode support</li> </ul>"},{"location":"structured/tech-stack/tech-stack/#6-ui-components-shadcnui","title":"6. UI Components (Shadcn/UI)","text":"<p>Pre-designed UI components for fast and consistent UI development.</p>"},{"location":"structured/tech-stack/tech-stack/#7-deployment-vercel","title":"7. Deployment (Vercel)","text":"<p>Reliable, scalable hosting optimized specifically for Next.js applications.</p>"},{"location":"structured/tech-stack/tech-stack/#8-email-resend","title":"8. Email (Resend)","text":"<p>Effective email communication solutions integrated seamlessly into the stack.</p>"},{"location":"structured/tech-stack/tech-stack/#additional-features","title":"Additional Features","text":""},{"location":"structured/tech-stack/tech-stack/#responsive-design","title":"Responsive Design","text":"<p>Ensure optimal performance and user experience on all devices:</p> <ul> <li>Mobile-first approach</li> <li>Cross-device compatibility</li> <li>Adaptive layouts</li> </ul>"},{"location":"structured/tech-stack/tech-stack/#project-structure","title":"Project Structure","text":"<p>A clear, organized project structure facilitates ease of maintenance and scalability.  Here is one example:</p> <pre><code>project/\n\u251c\u2500\u2500 documentation/        # Generated documentation\n\u251c\u2500\u2500 public/               # Static assets\n\u251c\u2500\u2500 src/                  # Source code root\n\u2502   \u251c\u2500\u2500 app/              # Next.js app router pages\n\u2502   \u251c\u2500\u2500 components/       # React components\n\u2502   \u251c\u2500\u2500 hooks/            # Integration hooks\n\u2502   \u251c\u2500\u2500 lib/              # Library functions\n\u2502   \u251c\u2500\u2500 styles/           # Global styles\n\u2502   \u251c\u2500\u2500 supabase/         # Supabase functions\n\u2502   \u251c\u2500\u2500 utils/            # Utility functions\n\u251c\u2500\u2500 tests/                # Test suites\n\u2502   \u251c\u2500\u2500 integration/      # Integration tests\n\u2502   \u2514\u2500\u2500 unit/             # Unit tests\n</code></pre> <p>(If you are using next.js template, another approach is to take a screenshot of the folders it generates in Visual Studio to give to Cursor IDE.)</p>"},{"location":"structured/tech-stack/tech-stack/#getting-started","title":"Getting Started","text":"<p>Create free accounts to begin development:</p> <ul> <li>Clerk</li> <li>Supabase</li> <li>Stripe</li> <li>Vercel</li> <li>Resend</li> </ul> <p>For troubleshooting, use resources such as Perplexity.</p> <p>Get the basics to help you build an MVP using a sample\u00a0starter kit.</p>"}]}